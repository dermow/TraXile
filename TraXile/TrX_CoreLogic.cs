using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;
using System.Windows.Forms;
using log4net;
using Microsoft.Data.Sqlite;

namespace TraXile
{
    public delegate void Trx_GenericEventHandler(TrX_CoreLogicGenericEventArgs e);
    public delegate void TrX_ActivityEventHandler(TrX_CoreLogicActivityEventArgs e);

    public class TrX_CoreLogicGenericEventArgs : EventArgs
    {
        // Core logic
        private readonly TrX_CoreLogic _logic;
        public TrX_CoreLogic Logic => _logic;

        public TrX_CoreLogicGenericEventArgs(TrX_CoreLogic logic)
        {
            _logic = logic;
        }
    }

    public class TrX_CoreLogicActivityEventArgs : EventArgs
    {
        // Core logic
        private readonly TrX_CoreLogic _logic;
        public TrX_CoreLogic Logic => _logic;

        // Activity
        private readonly TrX_TrackedActivity _activity;
        public TrX_TrackedActivity Activity => _activity;

        public TrX_CoreLogicActivityEventArgs(TrX_CoreLogic logic, TrX_TrackedActivity activity)
        {
            _logic = logic;
            _activity = activity;
        }
    }

    public class TrX_CoreLogic
    {
        // Event: initialization of history is finished
        public event Trx_GenericEventHandler OnHistoryInitialized;

        // Event: called when an activity is finished
        public event TrX_ActivityEventHandler OnActivityFinished;

        // Event: called when tags are changed
        public event Trx_GenericEventHandler OnTagsUpdated;

        // Event: Activity started
        public event TrX_ActivityEventHandler OnActivityStarted;

        // DateTime format info for enforcing specific calendar info
        public DateTimeFormatInfo _dateTimeFormatInfo;

        // Exit switch
        private bool _exit;

        // Flag if logic has been started 
        private bool _StartedFlag = false;

        // Flag if next area is an expedition area
        private bool _nextAreaIsExp = false;

        // IP and port of the current instance, for identifiing activity changes
        private string _currentInstanceEndpoint;

        // Last known endoint of simulacrum
        private string _lastSimuEndpoint;

        // Level of the next area
        private int _nextAreaLevel;

        // seed of next area
        private long _nextAreaSeed;

        // Hash code of the last known logfile line
        private int _lastHash = 0;

        // Flag if history is initialized (logfile read finished)
        private bool _historyInitialized;

        // Dictionary of known hashes
        private Dictionary<int, string> _dict;

        // List of known player names (used for death calc)
        private List<string> _knownPlayerNames;

        // List of lab names
        private List<string> labs;

        // Event mapping (Logpattern <-> Event Type)
        private TrX_EventMapping _eventMapping;

        // Default mappings
        private TrX_DefaultMappings _defaultMappings;

        // EventQ
        private ConcurrentQueue<TrX_TrackingEvent> _eventQueue;

        // Thread for logfile parsing
        private Thread _logParseThread;

        // Thrad for handling events generated by log parse Thread
        private Thread _eventThread;

        // Time of app init start
        private DateTime _initStartTime;

        // Time of app init end
        private DateTime _initEndTime;

        // DateTime of the current Hideout tracking block
        private DateTime _hoStart;

        // Flag if tracking of a hideout block is currently active
        private bool _trackingHO;

        // ID list of already parsed Activities
        private List<string> _parsedActivities;

        // Log handler
        private ILog _log;

        // Path to Client.txt file
        private string _clientTxtPath;

        // Property: List of Tags
        private List<TrX_ActivityTag> _tags;
        public List<TrX_ActivityTag> Tags => _tags;

        // Property: Current Activity
        public TrX_TrackedActivity _currentActivity;
        public TrX_TrackedActivity CurrentActivity
        {
            get { return _currentActivity; }
            set { _currentActivity = value; }
        }

        // Property: Event History
        private List<TrX_TrackedActivity> _eventHistory;
        public List<TrX_TrackedActivity> ActivityHistory => _eventHistory;

        // Property: EventQ initialized
        private bool _eventQueueInitizalized;
        public bool EventQueueInitialized => _eventQueueInitizalized;

        // Property: LogLines total 
        private double _logLinesTotal;
        public double LogLinesTotal => _logLinesTotal;

        // Property: LogLines read
        private double _logLinesRead;
        public double LogLinesRead => _logLinesRead;

        // Property: Is current map zana
        private bool _isMapZana;
        public bool IsMapZana => _isMapZana;

        // Property: Is current map vaal area
        private bool _isMapVaalArea;
        public bool IsMapVaalArea => _isMapVaalArea;

        // Property: Is current map sanctum
        private bool _isMapSanctum;
        public bool IsMapSanctum => _isMapSanctum;

        // Property: Is current map logbook
        private bool _isMapLogbookSide;
        public bool IsMapLogbookSide => _isMapLogbookSide;

        // Property: Is current map labtrial
        private bool _isMapLabTrial;
        public bool IsMapLabTrial => _isMapLabTrial;

        // Property: Is current area abyss area
        private bool _isMapAbyssArea;
        public bool IsMapAbyssArea => _isMapAbyssArea;

        // Property: Current Area
        private string _currentArea;
        public string CurrentArea => _currentArea;

        // Property: Current Area Level
        private int _currentAreaLevel;
        private long _currentAreaSeed;

        public int CurrentAreaLevel => _currentAreaLevel;

        // Property: Previous activity in overlay
        private TrX_TrackedActivity _prevActivityOverlay;
        public TrX_TrackedActivity OverlayPrevActivity => _prevActivityOverlay;

        // Property: DB Manager
        private TrX_DataBackend _dataBackend;
        public TrX_DataBackend Database => _dataBackend;

        // Property: Statistics manager
        private TrX_StatsManager _myStats;
        public TrX_StatsManager Stats => _myStats;

        // Property: Long stat names
        private Dictionary<string, string> _statNamesLong;
        public Dictionary<string, string> StatNamesLong => _statNamesLong;

        // Property: Path to Client.txt
        public string ClientTxtPath
        {
            get { return _clientTxtPath; }
            set { _clientTxtPath = value; }
        }

        // Property Minimum activity cap
        private int _timeCapMin = 0;
        public int MinimumCap
        {
            get { return _timeCapMin; }
            set { _timeCapMin = value; }
        }

        /// <summary>
        /// Main Window Constructor
        /// </summary>
        public TrX_CoreLogic(int minTimeCap = 0)
        {
            _timeCapMin = minTimeCap;
            Init();
        }

        /// <summary>
        /// Do main initialization
        /// ONLY CALL ONCE! S
        /// </summary>
        private void Init()
        {
            // Fixing the DateTimeFormatInfo to Gregorian Calendar, to avoid wrong timestamps with other calendars
            _dateTimeFormatInfo = DateTimeFormatInfo.GetInstance(new CultureInfo("en-CA"));
            _dateTimeFormatInfo.Calendar = new GregorianCalendar();
            _log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
            _eventMapping = new TrX_EventMapping();
            _defaultMappings = new TrX_DefaultMappings();
            _parsedActivities = new List<string>();
            _dict = new Dictionary<int, string>();
            _eventQueue = new ConcurrentQueue<TrX_TrackingEvent>();
            _eventHistory = new List<TrX_TrackedActivity>();
            _knownPlayerNames = new List<string>();
            _currentArea = "None";
            _eventQueueInitizalized = false;
            _lastSimuEndpoint = "";
            _tags = new List<TrX_ActivityTag>();
            _initStartTime = DateTime.Now;
            _dataBackend = new TrX_DataBackend(TrX_Static.DB_PATH, ref _log);
            _myStats = new TrX_StatsManager(_dataBackend);

            InitDefaultTags();
            InitNumStats();
            ReadKnownPlayers();
            LoadTags();
            SaveVersion();

            _eventQueue.Enqueue(new TrX_TrackingEvent(EVENT_TYPES.APP_STARTED) { EventTime = DateTime.Now, LogLine = "Application started." });

            // Since 0.9.2 stats cache is DB only, do first import if file is still existing
            if (File.Exists(TrX_Static.CACHE_PATH))
            {
                // Import is only needed when last hash is not in kvstore
                string last = _dataBackend.GetKVStoreValue("last_hash");

                last = null;
                if (string.IsNullOrEmpty(last))
                {
                    _log.Info("File 'stats.cache' found wich is deprecated -> importing to database.");

                    string firstLine;
                    firstLine = File.ReadAllLines(TrX_Static.CACHE_PATH).First();

                    if (!string.IsNullOrEmpty(firstLine))
                    {
                        try
                        {
                            int hash = Convert.ToInt32(firstLine.Split(';')[1]);
                            _dataBackend.SetKVStoreValue("last_hash", hash.ToString());
                            _log.Info("Successfully imported stats.cache to database.");

                            File.Delete(TrX_Static.CACHE_PATH);
                        }
                        catch (Exception ex)
                        {
                            _log.Warn("Error importing last hash from file, skipping.");
                            _log.Debug(ex.ToString());
                        }
                    }
                }
            }

            ReadStatsCache();

            if (!_historyInitialized)
            {
                ReadActivityLogFromSQLite();
            }

            // Thread for Log Parsing and Enqueuing
            _logParseThread = new Thread(new ThreadStart(LogParsing))
            {
                Name = "ParserThread",
                IsBackground = true
            };

            // Thread for Queue processing / Dequeuing
            _eventThread = new Thread(new ThreadStart(EventHandling))
            {
                Name = "WorkerThread",
                IsBackground = true
            };

            _log.Info("Core logic initialized.");
        }

        public bool CheckForValidClientLogFile(string path)
        {
            if (!File.Exists(path))
            {
                _log.Error($"Configured Client.txt not found: {path}");
                return false;
            }

            return true;
        }

        /// <summary>
        /// Start logfile parsing and event handling
        /// </summary>
        public void Start()
        {
            _logParseThread.Start();
            _eventThread.Start();

            _log.Info("Core logic started.");
        }

        /// <summary>
        /// Stop logic
        /// </summary>
        /// <param name="timeout">timeout to wait for exit</param>
        public void Stop(int timeout = 2000)
        {
            _exit = true;
            int i = 0;

            // Wait for threads to finish
            while (_eventThread.IsAlive || _logParseThread.IsAlive)
            {
                Thread.Sleep(1);
                i++;
                if (i > timeout)
                {
                    break;
                }
            }

            if (_eventThread.IsAlive)
            {
                _eventThread.Abort();
            }
            if (_logParseThread.IsAlive)
            {
                _logParseThread.Abort();
            }
        }

        /// <summary>
        /// Read the statistics cache
        /// </summary>
        private bool ReadStatsCache()
        {
            SqliteDataReader dataReader;

            // Read last hash
            _lastHash = Convert.ToInt32(_dataBackend.GetKVStoreValue("last_hash"));

            // Read last stat vaules
            List<string> stats = new List<string>();
            foreach (KeyValuePair<string, int> kvp in _myStats.NumericStats)
            {
                stats.Add(kvp.Key);
            }

            foreach (string s in stats)
            {
                dataReader = _dataBackend.GetSQLReader($"select stat_value from tx_stats where stat_name ='{s}' order by timestamp desc limit 1");
                while (dataReader.Read())
                {
                    _myStats.NumericStats[s] = dataReader.GetInt32(0);
                }
            }

            return true;
        }

        /// <summary>
        /// Write the statistics cache
        /// </summary>
        private void SaveStatsCache()
        {
            // DB
            _dataBackend.SetKVStoreValue("last_hash", _lastHash.ToString());
        }

        /// <summary>
        ///  Initialize all default tags
        /// </summary>
        private void InitDefaultTags()
        {
            List<TrX_ActivityTag> tmpTags;
            tmpTags = new List<TrX_ActivityTag>
            {
                new TrX_ActivityTag("blight") { BackColor = Color.LightGreen, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("delirium") { BackColor = Color.WhiteSmoke, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("einhar") { BackColor = Color.Red, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("incursion") { BackColor = Color.GreenYellow, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("syndicate") { BackColor = Color.Gold, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("zana") { BackColor = Color.Blue, ForeColor = Color.White, ShowInListView = true },
                new TrX_ActivityTag("niko") { BackColor = Color.OrangeRed, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("zana-map") { BackColor = Color.Blue, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("seer") { BackColor = Color.Red, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("mist") { BackColor = Color.Red, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("memory") { BackColor = Color.Red, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("expedition") { BackColor = Color.Turquoise, ForeColor = Color.Black, ShowInListView = true },
                new TrX_ActivityTag("rog") { BackColor = Color.Turquoise, ForeColor = Color.Black },
                new TrX_ActivityTag("gwennen") { BackColor = Color.Turquoise, ForeColor = Color.Black },
                new TrX_ActivityTag("dannig") { BackColor = Color.Turquoise, ForeColor = Color.Black },
                new TrX_ActivityTag("tujen") { BackColor = Color.Turquoise, ForeColor = Color.Black },
                new TrX_ActivityTag("karst") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("tibbs") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("isla") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("tullina") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("niles") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("nenet") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("vinderi") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("gianna") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("huck") { BackColor = Color.IndianRed, ForeColor = Color.Black },
                new TrX_ActivityTag("vaal-area") { BackColor = Color.DarkRed, ForeColor = Color.White },
                new TrX_ActivityTag("lab-trial") { BackColor = Color.DarkTurquoise, ForeColor = Color.Black },
                new TrX_ActivityTag("abyss-depths") { BackColor = Color.ForestGreen, ForeColor = Color.Black },
                new TrX_ActivityTag("exp-side-area") { BackColor = Color.Turquoise, ForeColor = Color.Black },
                new TrX_ActivityTag("twice-blessed") { BackColor = Color.DarkTurquoise, ForeColor = Color.Black },
                new TrX_ActivityTag("harvest") { BackColor = Color.Blue, ForeColor = Color.White },
                new TrX_ActivityTag("blueprint") { BackColor = Color.IndianRed, ForeColor = Color.AliceBlue },
                new TrX_ActivityTag("sanctum") { BackColor = Color.Purple, ForeColor = Color.White },
                new TrX_ActivityTag("ultimatum") { BackColor = Color.MediumVioletRed, ForeColor = Color.White },
                new TrX_ActivityTag("ultimatum-win") { BackColor = Color.MediumVioletRed, ForeColor = Color.White },
                new TrX_ActivityTag("ultimatum-loss") { BackColor = Color.MediumVioletRed, ForeColor = Color.White },
                new TrX_ActivityTag("ultimatum-loss") { BackColor = Color.MediumVioletRed, ForeColor = Color.White },
                new TrX_ActivityTag("ultimatum-took-reward") { BackColor = Color.MediumVioletRed, ForeColor = Color.White }
            };

            foreach (TrX_ActivityTag tag in tmpTags)
            {
                try
                {
                    _dataBackend.DoNonQueryNoErrorHandling("insert into tx_tags (tag_id, tag_display, tag_bgcolor, tag_forecolor, tag_type, tag_show_in_lv) values " +
                                  $"('{tag.ID}', '{tag.DisplayName}', '{tag.BackColor.ToArgb()}', '{tag.ForeColor.ToArgb()}', 'default', {(tag.ShowInListView ? "1" : "0")})", false);
                    _log.Info($"Default tag '{tag.ID}' added to database");
                }
                catch (SqliteException e)
                {
                    if (!e.Message.Contains("SQLite Error 19"))
                    {
                        _log.Error(e.ToString());
                    }
                }
            }
        }

        /// <summary>
        /// Load user created tags
        /// </summary>
        private void LoadTags()
        {
            SqliteDataReader sqlReader;
            sqlReader = _dataBackend.GetSQLReader("SELECT * FROM tx_tags ORDER BY tag_display ASC");

            while (sqlReader.Read())
            {
                string sID = sqlReader.GetString(0);
                string sType = sqlReader.GetString(4);
                TrX_ActivityTag tag = new TrX_ActivityTag(sID, sType != "custom")
                {
                    DisplayName = sqlReader.GetString(1),
                    BackColor = Color.FromArgb(Convert.ToInt32(sqlReader.GetString(2))),
                    ForeColor = Color.FromArgb(Convert.ToInt32(sqlReader.GetString(3))),
                    ShowInListView = sqlReader.GetInt32(5) == 1,
                    SoundEnabled = sqlReader.GetInt32(6) == 1,
                    SoundID = sqlReader.GetString(7)
                };
                _tags.Add(tag);
            }
        }

        /// <summary>
        /// Find matching tag for given display name
        /// </summary>
        /// <param name="s_display_name"></param>
        /// <returns></returns>
        public TrX_ActivityTag GetTagByDisplayName(string s_display_name)
        {
            foreach (TrX_ActivityTag t in _tags)
            {
                if (t.DisplayName == s_display_name)
                    return t;
            }

            return null;
        }

        /// <summary>
        /// Mouse click handler for label
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Lbl_MouseClick(object sender, MouseEventArgs e)
        {
            TrX_ActivityTag tag = GetTagByDisplayName(((Label)sender).Text);
            if (!tag.IsDefault)
            {
                if (_currentActivity != null)
                {
                    if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                    {
                        if (_currentActivity.SideArea_ZanaMap.HasTag(tag.ID))
                        {
                            _currentActivity.SideArea_ZanaMap.RemoveTag(tag.ID);
                        }
                        else
                        {
                            _currentActivity.SideArea_ZanaMap.AddTag(tag.ID);
                        }
                    }
                    else
                    {
                        if (_currentActivity.HasTag(tag.ID))
                        {
                            _currentActivity.RemoveTag(tag.ID);
                        }
                        else
                        {
                            _currentActivity.AddTag(tag.ID);
                        }

                    }
                }
            }
        }

        /// <summary>
        /// Mouse over handler for label
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Lbl_MouseHover(object sender, EventArgs e)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Reload the Poe Logfile
        /// </summary>
        public void ReloadLogFile()
        {
            ResetStats();
            _eventQueueInitizalized = false;
            _lastHash = 0;
            Application.Restart();
        }

        /// <summary>
        /// Initialize the stats
        /// </summary>
        private void InitNumStats()
        {
            _myStats.NumericStats = new Dictionary<string, int>
            {
                { "AreaChanges", 0 },
                { "TotalKilledCount", 0 },
                { "EinharCaptures", 0 },
                { "ExpeditionEncounters", 0 },
                { "ExpeditionEncounters_Rog", 0 },
                { "ExpeditionEncounters_Tujen", 0 },
                { "ExpeditionEncounters_Gwennen", 0 },
                { "ExpeditionEncounters_Dannig", 0 },
                { "HideoutTimeSec", 0 },
                { "LabsFinished", 0 },
                { "LabsStarted", 0 },
                { "LevelUps", 0 },
                { "NamelessSeerEncounters", 0 },
                { "ReflectingMistEncounters", 0 },
                { "MemoryTears", 0 },
                { "TotalMapsDone", 0 },
                { "TotalHeistsDone", 0 },
                { "SanctumKilledLycia1", 0 },
                { "SanctumKilledLycia2", 0 },
                { "SimulacrumCleared", 0 },
                { "SimulacrumStarted", 0 },
                { "Suicides", 0 },
                { "TemplesDone", 0 },
                { "TrialMasterTookReward", 0 },
                { "TrialMasterVictory", 0 },
                { "TrialMasterSuccess", 0 },
                { "AncestorMatchesWon", 0 },
                { "AncestorMatchesLost", 0 },
                { "AncestorTournamentsWon", 0 },
                { "AncestorTournamentsLost", 0 },
            };

            _statNamesLong = new Dictionary<string, string>
            {
                { "TotalMapsDone", "Total maps done" },
                { "TotalHeistsDone", "Total heists done" },
                { "TotalKilledCount", "Death count" },
                { "EinharCaptures", "Einhar beasts captured" },
                { "TrialMasterTookReward", "Ultimatum: took rewards" },
                { "TrialMasterVictory", "Ultimatum: cleared all rounds" },
                { "TrialMasterSuccess", "Ultimatum: did not fail" },
                { "LevelUps", "Level Ups" },
                { "NamelessSeerEncounters", "Encounters with The Nameless Seer" },
                { "ReflectingMistEncounters", "Encounters with The Reflecting Mist" },
                { "MemoryTears", "Memory Tears opened" },
                { "SimulacrumStarted", "Simulacrum started" },
                { "SimulacrumCleared", "Simulacrum 100% done" },
                { "LabsFinished", "Finished labs" },
                { "TemplesDone", "Temples done" },
                { "LabsStarted", "Labs started" },
                { "ExpeditionEncounters", "Expedition encounters" },
                { "ExpeditionEncounters_Rog", "Expedition encounters: Rog" },
                { "ExpeditionEncounters_Tujen", "Expedition encounters: Tujen" },
                { "ExpeditionEncounters_Gwennen", "Expedition encounters: Gwennen" },
                { "ExpeditionEncounters_Dannig", "Expedition encounters: Dannig" },
                { "HideoutTimeSec", "Hideout time" },
                { "Suicides", "Suicides" },
                { "SanctumKilledLycia1", "Sanctum: Lycia 1 killed" },
                { "SanctumKilledLycia2", "Sanctum: Lycia 2 killed" },
                { "AncestorMatchesWon", "Ancestor: Matches won" },
                { "AncestorMatchesLost", "Ancestor: Matches lost" },
                { "AncestorTournamentsWon", "Ancestor: Tournaments won" },
                { "AncestorTournamentsLost", "Ancestor: Tournaments lost" }
            };

            labs = new List<string>
            {
                "Unknown",
                "The Labyrinth",
                "The Merciless Labyrinth",
                "The Cruel Labyrinth",
                "Uber-Lab",
                "Advanced Uber-Lab"
            };

            foreach (string s in labs)
            {
                string sName = s.Replace("'", "");
                if (!_myStats.NumericStats.ContainsKey($"LabsCompleted_{sName}"))
                    _myStats.NumericStats.Add($"LabsCompleted_{sName}", 0);
                if (!_statNamesLong.ContainsKey($"LabsCompleted_{sName}"))
                    _statNamesLong.Add($"LabsCompleted_{sName}", $"Labs completed: {sName}");
            }
        }

        /// <summary>
        /// Reset stats
        /// </summary>
        public void ResetStats()
        {
            ClearStatsDB();
        }

        /// <summary>
        /// Empty stats DB
        /// </summary>
        private void ClearStatsDB()
        {
            _dataBackend.DoNonQuery("drop table tx_stats");
            _dataBackend.DoNonQuery("create table if not exists tx_stats " +
                "(timestamp int, " +
                "stat_name text, " +
                "stat_value int)");

            InitNumStats();

            _log.Info("Stats cleared.");
        }

        /// <summary>
        /// Track known players. Needed to find out if death events are for your own 
        /// char or not. If a player name enters your area, It could not be you :)
        /// </summary>
        /// <param name="s_name"></param>
        private void AddKnownPlayerIfNotExists(string s_name)
        {
            if (!_knownPlayerNames.Contains(s_name))
            {
                _knownPlayerNames.Add(s_name);
                _dataBackend.DoNonQuery($"insert into tx_known_players (player_name) VALUES ('{s_name}')");
                _log.Info($"KnownPlayerAdded -> name: {s_name}");
            }
        }

        /// <summary>
        /// Read list of known players
        /// </summary>
        private void ReadKnownPlayers()
        {
            SqliteDataReader sqlReader;
            sqlReader = _dataBackend.GetSQLReader("SELECT * FROM tx_known_players");

            while (sqlReader.Read())
            {
                _knownPlayerNames.Add(sqlReader.GetString(0));
            }
        }

        /// <summary>
        /// Save activity to database
        /// </summary>
        /// <param name="i_ts"></param>
        /// <param name="s_type"></param>
        /// <param name="s_area"></param>
        /// <param name="i_area_level"></param>
        /// <param name="i_stopwatch"></param>
        /// <param name="i_death_counter"></param>
        /// <param name="i_ulti_rounds"></param>
        /// <param name="b_zana"></param>
        /// <param name="l_tags"></param>
        private void SaveToActivityLog(long i_ts, string s_type, string s_area, int i_area_level, int i_stopwatch, int i_death_counter, int i_ulti_rounds, bool b_zana, List<string> l_tags, bool b_success, int i_pause_time = 0)
        {
            //replace ' in area
            s_area = s_area.Replace("'", "");
            string sTags = "";

            for (int i = 0; i < l_tags.Count; i++)
            {
                sTags += l_tags[i];
                if (i < (l_tags.Count - 1))
                    sTags += "|";
            }

            _dataBackend.DoNonQuery("insert into tx_activity_log " +
               "(timestamp, " +
               "act_type, " +
               "act_area, " +
               "act_area_level, " +
               "act_stopwatch, " +
               "act_deathcounter, " +
               "act_ulti_rounds," +
               "act_is_zana," +
               "act_tags," +
               "act_success," +
               "act_pause_time) VALUES (" +
               i_ts.ToString()
                 + ", '" + s_type
                 + "', '" + s_area
                 + "', '" + i_area_level.ToString()
                 + "', " + i_stopwatch
                 + ", " + i_death_counter
                 + ", " + i_ulti_rounds
                 + ", " + (b_zana ? "1" : "0")
                 + ", '" + sTags + "'"
                 + ", " + (b_success ? "1" : "0")
                 + ", " + i_pause_time.ToString()
                 + ")");

            _parsedActivities.Add(i_ts.ToString() + "_" + s_area);
        }

        /// <summary>
        /// get activity type object from string
        /// </summary>
        /// <param name="s_type"></param>
        /// <returns></returns>
        private ACTIVITY_TYPES GetActTypeFromString(string s_type)
        {
            ACTIVITY_TYPES returnType;

            try
            {
                returnType = (ACTIVITY_TYPES)Enum.Parse(typeof(ACTIVITY_TYPES), s_type, true);
            }
            catch
            {
                returnType = ACTIVITY_TYPES.OTHER;
            }

            return returnType;
        }

        /// <summary>
        /// Read the activity log from Database
        /// </summary>
        private void ReadActivityLogFromSQLite()
        {
            SqliteDataReader sqlReader;
            sqlReader = _dataBackend.GetSQLReader("SELECT * FROM tx_activity_log ORDER BY timestamp DESC");

            string[] arrTags;

            while (sqlReader.Read())
            {
                TimeSpan ts = TimeSpan.FromSeconds(sqlReader.GetInt32(3));
                string sType = sqlReader.GetString(1);
                ACTIVITY_TYPES aType = GetActTypeFromString(sType);
                TrX_TrackedActivity map;

                if (aType == ACTIVITY_TYPES.LABYRINTH)
                {
                    map = new TrX_TrackedActivity
                    {
                        Started = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc).AddSeconds(sqlReader.GetInt32(0)).ToLocalTime(),
                        TimeStamp = sqlReader.GetInt32(0),
                        CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}", ts.Hours, ts.Minutes, ts.Seconds),
                        TotalSeconds = Convert.ToInt32(ts.TotalSeconds),
                        Type = aType,
                        Area = sqlReader.GetString(2),
                        DeathCounter = sqlReader.GetInt32(4),
                        TrialMasterCount = sqlReader.GetInt32(5),
                        PausedTime = sqlReader.GetDouble(10)
                    };
                }
                else
                {
                    map = new TrX_TrackedActivity
                    {
                        Started = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc).AddSeconds(sqlReader.GetInt32(0)).ToLocalTime(),
                        TimeStamp = sqlReader.GetInt32(0),
                        CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}", ts.Hours, ts.Minutes, ts.Seconds),
                        TotalSeconds = Convert.ToInt32(ts.TotalSeconds),
                        Type = aType,
                        Area = sqlReader.GetString(2),
                        DeathCounter = sqlReader.GetInt32(4),
                        TrialMasterCount = sqlReader.GetInt32(5),
                        PausedTime = sqlReader.GetDouble(10)
                    };
                }


                try
                {
                    map.AreaLevel = sqlReader.GetInt32(8);
                }
                catch
                {
                    map.AreaLevel = 0;
                }

                try
                {
                    string sTags = sqlReader.GetString(7);
                    arrTags = sTags.Split('|');
                }
                catch
                {
                    arrTags = new string[0];
                }

                for (int i = 0; i < arrTags.Length; i++)
                {
                    map.AddTag(arrTags[i]);
                }

                if (!_parsedActivities.Contains(map.UniqueID))
                {
                    if (map.TotalSeconds > _timeCapMin)
                    {
                        _eventHistory.Add(map);
                    }
                    _parsedActivities.Add(map.UniqueID);
                }
            }
            _historyInitialized = true;

        }

        /// <summary>
        /// Main method for log parsing thread
        /// </summary>
        private void LogParsing()
        {
            while (!_exit)
            {
                // Wait for Valid log file to start parsing
                Thread.Sleep(1000);
                if (CheckForValidClientLogFile(_clientTxtPath))
                {
                    ParseLogFile();
                }
            }
        }

        /// <summary>
        /// Get line count from Client.txt. Used for progress calculation
        /// </summary>
        /// <returns></returns>
        private int GetLogFileLineCount()
        {
            int iCount = 0;
            FileStream fs1 = new FileStream(_clientTxtPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            TextReader reader1 = new StreamReader(fs1);
            while ((reader1.ReadLine()) != null)
            {
                iCount++;
            }
            reader1.Close();
            return iCount;
        }

        /// <summary>
        /// Parse the logfile
        /// </summary>
        private void ParseLogFile()
        {
            _log.Info($"Started logfile parsing. Last hash was {_lastHash}");
            _logLinesTotal = Convert.ToDouble(GetLogFileLineCount());

            var fs = new FileStream(_clientTxtPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            bool bNewContent = _lastHash == 0;

            using (StreamReader reader = new StreamReader(fs))
            {
                string line;
                int lineHash = 0;
                DateTime lastEvTime = new DateTime();

                // Keep file open
                while (!_exit)
                {
                    line = reader.ReadLine();

                    if (line == null)
                    {
                        if (!_eventQueueInitizalized)
                        {
                            _currentActivity = null;
                            _isMapZana = false;
                            _initEndTime = DateTime.Now;
                            TimeSpan tsInitDuration = (_initEndTime - _initStartTime);
                            _eventQueue.Enqueue(new TrX_TrackingEvent(EVENT_TYPES.APP_READY)
                            {
                                EventTime = DateTime.Now,
                                LogLine = $"Application initialized in {Math.Round(tsInitDuration.TotalSeconds, 2)} seconds."
                            });
                            _log.Info($"Initialized in {tsInitDuration.TotalSeconds} seconds.");
                            _lastHash = lineHash;

                            // Trigger ready event
                            OnHistoryInitialized(new TrX_CoreLogicGenericEventArgs(this));

                            SaveStatsCache();
                        }
                        _eventQueueInitizalized = true;

                        bNewContent = true;

                        Thread.Sleep(100);
                        continue;
                    }

                    lineHash = line.GetHashCode();

                    if (_dict.ContainsKey(lineHash))
                        continue;

                    if (lineHash == _lastHash || _lastHash == 0)
                    {
                        bNewContent = true;
                    }

                    if (!bNewContent)
                    {
                        _logLinesRead++;
                        continue;
                    }

                    _lastHash = lineHash;

                    foreach (KeyValuePair<string, EVENT_TYPES> kv in _eventMapping.Mapping)
                    {
                        if (line.Contains(kv.Key))
                        {
                            if (!_dict.ContainsKey(lineHash))
                            {
                                TrX_TrackingEvent ev = new TrX_TrackingEvent(kv.Value)
                                {
                                    LogLine = line
                                };
                                try
                                {
                                    DateTime dt = DateTime.Parse($"{line.Split(' ')[0]} {line.Split(' ')[1]}", _dateTimeFormatInfo);
                                    ev.EventTime = dt;
                                    lastEvTime = ev.EventTime;
                                }
                                catch
                                {
                                    ev.EventTime = lastEvTime;
                                }
                                _dict.Add(lineHash, "init");

                                if (!_eventQueueInitizalized)
                                {
                                    HandleSingleEvent(ev);
                                }
                                else
                                {
                                    _eventQueue.Enqueue(ev);
                                }
                            }
                        }
                    }
                    _logLinesRead++;
                }
            }
        }

        /// <summary>
        /// Handle events - Read Queue
        /// </summary>
        private void EventHandling()
        {
            while (!_exit)
            {
                Thread.Sleep(1);

                if (_eventQueueInitizalized)
                {
                    while (_eventQueue.TryDequeue(out TrX_TrackingEvent deqEvent))
                    {
                        HandleSingleEvent(deqEvent);
                    }
                }
            }
        }

        /// <summary>
        /// Check if a given area is a Map.
        /// </summary>
        /// <param name="sArea"></param>
        /// <param name="sSourceArea"></param>
        /// <returns></returns>
        private bool CheckIfAreaIsMap(string sArea, string sSourceArea = "")
        {
            // Laboratory could be map or heist...
            if (sArea == "Laboratory")
            {
                if (sSourceArea == "The Rogue Harbour")
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }

            foreach (string s in _defaultMappings.MapAreas)
            {
                if (s.Trim().Equals(sArea.Trim()))
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Check if a given area is a Heist
        /// </summary>
        /// <param name="sArea"></param>
        /// <param name="sSourceArea"></param>
        /// <returns></returns>
        private bool CheckIfAreaIsHeist(string sArea, string sSourceArea = "")
        {
            // Laboratory could be map or heist...
            if (sArea == "Laboratory")
            {
                if (sSourceArea == "The Rogue Harbour")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            foreach (string s in _defaultMappings.HeistAreas)
            {
                if (s.Trim().Equals(sArea.Trim()))
                    return true;
            }
            return false;
        }

        private void SplitCurrentActivity()
        {
            if (_currentActivity != null)
            {
                _log.Debug($"splitting activity {_currentActivity.UniqueID}");

                // set same level for next area
                _nextAreaLevel = _currentActivity.AreaLevel;

                FinishActivity(_currentActivity, _currentActivity.Area, _currentActivity.Type, DateTime.Now);

                if (_currentArea != _currentActivity.Area)
                {
                    _currentActivity.Pause();
                }
            }
        }

        /// <summary>
        /// Process a command entered via ingame chat
        /// </summary>
        /// <param name="s_command"></param>
        private void HandleChatCommand(string s_command)
        {
            _log.Info($"ChatCommand -> {s_command}");
            string[] spl = s_command.Split(' ');
            string sMain;
            string sArgs = "";

            try
            {
                sMain = spl[0];

                if (spl.Length > 1)
                {
                    sArgs = spl[1];
                }

                TrX_TrackedActivity currentAct = null;
                if (_currentActivity != null)
                {
                    if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                    {
                        currentAct = _currentActivity.SideArea_ZanaMap;
                    }
                    else
                    {
                        currentAct = _currentActivity;
                    }
                }

                switch (sMain)
                {
                    case "tag":
                        if (currentAct != null)
                        {
                            AddTagAutoCreate(sArgs, currentAct);
                        }
                        break;
                    case "untag":
                        if (currentAct != null)
                        {
                            RemoveTagFromActivity(sArgs, currentAct);
                        }
                        break;
                    case "pause":
                        PauseCurrentActivityOrSide();
                        break;
                    case "resume":
                        ResumeCurrentActivityOrSide();
                        break;
                    case "split":
                        SplitCurrentActivity();
                        break;
                    case "counter":
                        string cmdArgs = sArgs;
                        _log.Debug(sArgs);
                        break;
                    case "finish":
                        if (currentAct != null && !_isMapZana)
                        {
                            FinishActivity(_currentActivity, null, ACTIVITY_TYPES.MAP, DateTime.Now);
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                _log.Error($"Error handling chat command '{s_command}' -> {ex.Message}");
                _log.Debug(ex.ToString());
            }
        }

        /// <summary>
        /// Handle area change. Core logic for nearly all tracking
        /// </summary>
        /// <param name="ev"></param>
        private void HandleAreaChangeEvent(TrX_TrackingEvent ev)
        {
            string sSourceArea = _currentArea;
            string sTargetArea = GetAreaNameFromEvent(ev);
            string sAreaName = GetAreaNameFromEvent(ev);
            bool bSourceAreaIsMap = CheckIfAreaIsMap(sSourceArea),
            bSourceAreaIsVaal = _defaultMappings.VaalSideAreas.Contains(sSourceArea),
            bSourceAreaIsSanctum = _defaultMappings.SanctumAreas.Contains(sSourceArea),
            bSourceAreaIsAbyss = _defaultMappings.AbyssalAreas.Contains(sSourceArea),
            bSourceAreaIsLabTrial = sSourceArea.Contains("Trial of"),
            bSourceAreaIsLogbookSide = _defaultMappings.LogbookSideAreas.Contains(sSourceArea),
            bTargetAreaIsMap = CheckIfAreaIsMap(sTargetArea, sSourceArea),
            bTargetAreaIsHeist = CheckIfAreaIsHeist(sTargetArea, sSourceArea),
            bTargetAreaIsSimu = false,
            bTargetAreaMine = _defaultMappings.DelveAreas.Contains(sTargetArea),
            bTargetAreaIsTane = _defaultMappings.TaneAreas.Contains(sTargetArea),
            bTargetAreaTemple = _defaultMappings.TempleAreas.Contains(sTargetArea),
            bTargetAreaIsLab = _defaultMappings.LabyrinthStartAreas.Contains(sTargetArea),
            bTargetAreaIsMI = _defaultMappings.MavenInvitationAreas.Contains(sTargetArea),
            bTargetAreaIsAtziri = _defaultMappings.AtziriAreas.Contains(sTargetArea),
            bTargetAreaIsUberAtziri = _defaultMappings.UberAtziriAreas.Contains(sTargetArea),
            bTargetAreaIsElder = _defaultMappings.ElderAreas.Contains(sTargetArea),
            bTargetAreaIsShaper = _defaultMappings.ShaperAreas.Contains(sTargetArea),
            bTargetAreaIsSirusFight = _defaultMappings.SirusAreas.Contains(sTargetArea),
            bTargetAreaIsMavenFight = _defaultMappings.MavenFightAreas.Contains(sTargetArea),
            bTargetAreaIsCampaign = _defaultMappings.CampaignAreas.Contains(sTargetArea),
            bTargetAreaIsLabTrial = sTargetArea.Contains("Trial of"),
            bTargetAreaIsAbyssal = _defaultMappings.AbyssalAreas.Contains(sTargetArea),
            bTargetAreaIsVaal = _defaultMappings.VaalSideAreas.Contains(sTargetArea),
            bTargetAreaIsLogbook = _defaultMappings.LogbookAreas.Contains(sTargetArea),
            bTargetAreaIsLogBookSide = _defaultMappings.LogbookSideAreas.Contains(sTargetArea),
            bTargetAreaIsCata = _defaultMappings.CatarinaFightAreas.Contains(sTargetArea),
            bTargetAreaIsSafehouse = _defaultMappings.SyndicateSafehouseAreas.Contains(sTargetArea),
            bTargetAreaIsBreachStone = _defaultMappings.BreachstoneDomainAreas.Contains(sTargetArea),
            bTargetAreaIsExarch = _defaultMappings.SearingExarchAreas.Contains(sTargetArea),
            bTargetAreaIsBlackStar = _defaultMappings.BlackStarAreas.Contains(sTargetArea),
            bTargetAreaIsInfinitetHunger = _defaultMappings.InfiniteHungerAreas.Contains(sTargetArea),
            bTargetAreaIsEaterOfWorlds = _defaultMappings.EaterOfWorldsAreas.Contains(sTargetArea),
            bTargetAreaIsLegion = _defaultMappings.TimelessLegionAreas.Contains(sTargetArea),
            bTargetAreaIsKalandra = _defaultMappings.LakeOfKalandraAreas.Contains(sTargetArea),
            bTargetAreaIsSanctum = _defaultMappings.SanctumAreas.Contains(sTargetArea),
            bTargetAreaIsTrialmaster = _defaultMappings.TrialMasterAreas.Contains(sTargetArea),
            bTargetAreaIsToTa = _defaultMappings.TotAAreas.Contains(sTargetArea),
            bTargetAreaIsUltimatum = _defaultMappings.UltimatumAreas.Contains(sTargetArea),
            bTargetAreaIsKingsmarch = _defaultMappings.KingsmarchAreas.Contains(sTargetArea),
            bTargetAreaIsDread = _defaultMappings.IncarnationOfDreadAreas.Contains(sTargetArea),
            bTargetAreaIsFear = _defaultMappings.IncarnationOfFearAreas.Contains(sTargetArea),
            bTargetAreaIsNeglect = _defaultMappings.IncarnationOfNeglectAreas.Contains(sTargetArea);

            long lTS = ((DateTimeOffset)ev.EventTime).ToUnixTimeSeconds();

            // Sanctum runs after sanctum league are tracked differently -> not started from inside map.
            bool isOutSideSanctumLeague = (ev.EventTime > new DateTime(2023, 4, 5));

            IncrementStat("AreaChanges", ev.EventTime, 1);

            // Re-Entered?
            if (_currentActivity != null && _currentActivity.Area == sTargetArea && _currentActivity.InstanceEndpoint == _currentInstanceEndpoint)
            {
                _currentActivity.LastTimeEntered = ev.EventTime;
                _log.Debug($"re-entered activity: {_currentActivity.UniqueID}");
            }

            // Calculate Instance change based statistics:
            // ===========================================

            //Moving between two sanctums -handling in sanctum league?
            if (bSourceAreaIsSanctum && bTargetAreaIsSanctum && !isOutSideSanctumLeague)
            {
                return;
            }

            // Moving between two sanctums - handling after sanctum league?
            if (bSourceAreaIsSanctum && bTargetAreaIsSanctum && _currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.SANCTUM)
            {
                // Set the level to non-entering-area, so it will not be always level 1 
                if (sTargetArea != "The Forbidden Sanctum")
                {
                    _currentActivity.AreaLevel = _nextAreaLevel;
                }

                // if moving between sacntums, do no further calculations.
                return;
            }

            // Always show same ara for sanctums / after initial calculations
            if (bTargetAreaIsSanctum && isOutSideSanctumLeague)
            {
                sTargetArea = "The Forbidden Sanctum";
            }

            // Track the very first activity
            if ((!sTargetArea.Contains("Hideout")) && (!_defaultMappings.CampAreas.Contains(sTargetArea)))
            {
                _StartedFlag = false;
            }

            // Hideout?
            if (sTargetArea.Contains("Hideout") && !sTargetArea.Contains("Syndicate"))
            {
                if (!_trackingHO)
                {
                    _hoStart = ev.EventTime;
                    _trackingHO = true;
                }
            }
            else
            {
                if (_trackingHO)
                {
                    int hoSeconds;
                    hoSeconds = Convert.ToInt32((ev.EventTime - _hoStart).TotalSeconds);
                    IncrementStat("HideoutTimeSec", ev.EventTime, hoSeconds);
                    _trackingHO = false;
                }
            }

            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.LABYRINTH)
            {
                _currentActivity.LastEnded = ev.EventTime;
            }

            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.DELVE)
            {
                _currentActivity.LastEnded = ev.EventTime;
            }

            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.TANES_LABORATORY)
            {
                _currentActivity.LastEnded = ev.EventTime;
            }

            //Simu?
            if (_defaultMappings.SimulacrumAreas.Contains(sAreaName))
            {
                bTargetAreaIsSimu = true;
                if (_currentInstanceEndpoint != _lastSimuEndpoint)
                {
                    IncrementStat("SimulacrumStarted", ev.EventTime, 1);
                    _lastSimuEndpoint = _currentInstanceEndpoint;

                    _currentActivity = new TrX_TrackedActivity
                    {
                        Area = sTargetArea,
                        Type = ACTIVITY_TYPES.SIMULACRUM,
                        AreaLevel = _nextAreaLevel,
                        AreaSeed = _nextAreaSeed,
                        Started = ev.EventTime,
                        TimeStamp = lTS,
                        InstanceEndpoint = _currentInstanceEndpoint
                    };

                    _prevActivityOverlay = GetLastActivityByType(ACTIVITY_TYPES.SIMULACRUM);

                    _nextAreaLevel = 0;
                    _nextAreaSeed = 0;
                }
            }

            ACTIVITY_TYPES actType = ACTIVITY_TYPES.MAP;
            if (bTargetAreaIsMap)
            {
                actType = ACTIVITY_TYPES.MAP;
            }
            else if (bTargetAreaIsHeist)
            {
                actType = ACTIVITY_TYPES.HEIST;
            }
            else if (bTargetAreaIsSimu)
            {
                actType = ACTIVITY_TYPES.SIMULACRUM;
            }
            else if (bTargetAreaIsLab)
            {
                actType = ACTIVITY_TYPES.LABYRINTH;
            }
            else if (bTargetAreaMine)
            {
                actType = ACTIVITY_TYPES.DELVE;
            }
            else if (bTargetAreaTemple)
            {
                actType = ACTIVITY_TYPES.TEMPLE;
            }
            else if (bTargetAreaIsMI)
            {
                actType = ACTIVITY_TYPES.MAVEN_INVITATION;
            }
            else if (bTargetAreaIsAtziri)
            {
                actType = ACTIVITY_TYPES.ATZIRI;
            }
            else if (bTargetAreaIsUberAtziri)
            {
                actType = ACTIVITY_TYPES.UBER_ATZIRI;
            }
            else if (bTargetAreaIsShaper)
            {
                actType = ACTIVITY_TYPES.SHAPER_FIGHT;
            }
            else if (bTargetAreaIsElder)
            {
                actType = ACTIVITY_TYPES.ELDER_FIGHT;
            }
            else if (bTargetAreaIsMavenFight)
            {
                actType = ACTIVITY_TYPES.MAVEN_FIGHT;
            }
            else if (bTargetAreaIsSirusFight)
            {
                actType = ACTIVITY_TYPES.SIRUS_FIGHT;
            }
            else if (bTargetAreaIsCampaign)
            {
                actType = ACTIVITY_TYPES.CAMPAIGN;
            }
            else if (bTargetAreaIsAbyssal)
            {
                actType = ACTIVITY_TYPES.ABYSSAL_DEPTHS;
            }
            else if (bTargetAreaIsLabTrial)
            {
                actType = ACTIVITY_TYPES.LAB_TRIAL;
            }
            else if (bTargetAreaIsSanctum)
            {
                actType = ACTIVITY_TYPES.SANCTUM;
            }
            else if (bTargetAreaIsVaal)
            {
                actType = ACTIVITY_TYPES.VAAL_SIDEAREA;
            }
            else if (bTargetAreaIsLogbook)
            {
                actType = ACTIVITY_TYPES.LOGBOOK;
            }
            else if (bTargetAreaIsLogBookSide)
            {
                actType = ACTIVITY_TYPES.LOGBOOK_SIDE;
            }
            else if (bTargetAreaIsCata)
            {
                actType = ACTIVITY_TYPES.CATARINA_FIGHT;
            }
            else if (bTargetAreaIsSafehouse)
            {
                actType = ACTIVITY_TYPES.SAFEHOUSE;
            }
            else if (bTargetAreaIsBreachStone)
            {
                actType = ACTIVITY_TYPES.BREACHSTONE;
            }
            else if (bTargetAreaIsExarch)
            {
                actType = ACTIVITY_TYPES.SEARING_EXARCH_FIGHT;
            }
            else if (bTargetAreaIsBlackStar)
            {
                actType = ACTIVITY_TYPES.BLACK_STAR_FIGHT;
            }
            else if (bTargetAreaIsInfinitetHunger)
            {
                actType = ACTIVITY_TYPES.INFINITE_HUNGER_FIGHT;
            }
            else if (bTargetAreaIsEaterOfWorlds)
            {
                actType = ACTIVITY_TYPES.EATER_OF_WORLDS_FIGHT;
            }
            else if (bTargetAreaIsLegion)
            {
                actType = ACTIVITY_TYPES.TIMELESS_LEGION;
            }
            else if (bTargetAreaIsKalandra)
            {
                actType = ACTIVITY_TYPES.LAKE_OF_KALANDRA;
            }
            else if (bTargetAreaIsTrialmaster)
            {
                actType = ACTIVITY_TYPES.TRIALMASTER_FIGHT;
            }
            else if (bTargetAreaIsTane)
            {
                actType = ACTIVITY_TYPES.TANES_LABORATORY;
            }
            else if (bTargetAreaIsToTa)
            {
                actType = ACTIVITY_TYPES.ANCESTOR_TRIAL;
            }
            else if (bTargetAreaIsUltimatum)
            {
                actType = ACTIVITY_TYPES.INSCRIBED_ULTIMATUM;
            }
            else if (bTargetAreaIsKingsmarch)
            {
                actType = ACTIVITY_TYPES.KINGSMARCH;
            }
            else if (bTargetAreaIsDread)
            {
                actType = ACTIVITY_TYPES.ECHO_OF_REVERENCE;
            }
            else if (bTargetAreaIsFear)
            {
                actType = ACTIVITY_TYPES.ECHO_OF_TRAUMA;
            }
            else if (bTargetAreaIsNeglect)
            {
                actType = ACTIVITY_TYPES.ECHO_OF_LONELINESS;
            }

            // Special handling for logbook cemetery + vaal temple
            if (bTargetAreaIsLogbook && bTargetAreaIsMap)
            {
                actType = _nextAreaIsExp ? ACTIVITY_TYPES.LOGBOOK : ACTIVITY_TYPES.MAP;
                _nextAreaIsExp = false;
            }

            //Lab started?
            if (actType == ACTIVITY_TYPES.LABYRINTH && sSourceArea == "Aspirants Plaza")
            {
                string sLabName;

                switch (_nextAreaLevel)
                {
                    case 33:
                        sLabName = "The Labyrinth";
                        break;
                    case 55:
                        sLabName = "The Cruel Labyrinth";
                        break;
                    case 68:
                        sLabName = "The Merciless Labyrinth";
                        break;
                    case 75:
                        sLabName = "Uber-Lab";
                        break;
                    case 83:
                        sLabName = "Advanced Uber-Lab";
                        break;
                    default:
                        sLabName = "Unknown";
                        break;
                }

                // Finish activity
                if (_currentActivity != null)
                {
                    FinishActivity(_currentActivity, null, ACTIVITY_TYPES.MAP, ev.EventTime);
                }

                _currentActivity = new TrX_TrackedActivity
                {
                    Area = sLabName,
                    AreaLevel = _nextAreaLevel,
                    AreaSeed = _nextAreaSeed,
                    Type = actType,
                    Started = ev.EventTime,
                    TimeStamp = lTS,
                    InstanceEndpoint = _currentInstanceEndpoint
                };
                _currentActivity.StartStopWatch();

                _prevActivityOverlay = GetLastActivityByType(actType);
                IncrementStat("LabsStarted", ev.EventTime, 1);
                OnActivityStarted(new TrX_CoreLogicActivityEventArgs(this, _currentActivity));
            }

            //Aspirants Trial entered
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.LABYRINTH && sTargetArea == "Aspirants Trial")
            {
                (_currentActivity).TrialCount++;
            }

            //Lab cancelled?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.LABYRINTH)
            {
                if (sTargetArea.Contains("Hideout") || _defaultMappings.CampAreas.Contains(sTargetArea))
                {
                    FinishActivity(_currentActivity, null, ACTIVITY_TYPES.LABYRINTH, DateTime.Now);
                }
            }

            // Sanctum entered?
            if (isOutSideSanctumLeague == false && _currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP && actType == ACTIVITY_TYPES.SANCTUM)
            {
                if (_currentActivity.SideArea_Sanctum == null)
                {
                    _currentActivity.SideArea_Sanctum = new TrX_TrackedActivity
                    {
                        Area = sTargetArea,
                        AreaLevel = _nextAreaLevel,
                        AreaSeed = _nextAreaSeed,
                        Type = actType,
                        Started = ev.EventTime,
                        TimeStamp = lTS,
                        InstanceEndpoint = _currentActivity.InstanceEndpoint
                    };
                    _currentActivity.AddTag("sanctum");
                }

                _currentActivity.Pause();
                _currentActivity.StartPauseTime(ev.EventTime);

                _currentActivity.SideArea_Sanctum.StartStopWatch();
                _currentActivity.SideArea_Sanctum.EndPauseTime(ev.EventTime);
                _isMapSanctum = true;
            }
            else
            {
                _isMapSanctum = false;
            }

            // Left Sanctum area?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP && bSourceAreaIsSanctum)
            {
                if (_currentActivity.SideArea_Sanctum != null)
                {
                    _currentActivity.SideArea_Sanctum.LastEnded = ev.EventTime;
                    _currentActivity.SideArea_Sanctum.StopStopWatch();
                    _currentActivity.SideArea_Sanctum.StartPauseTime(ev.EventTime);

                    _currentActivity.Resume();
                    _currentActivity.EndPauseTime(ev.EventTime);
                }
            }

            // Vaal Side area entered?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP && actType == ACTIVITY_TYPES.VAAL_SIDEAREA)
            {
                if (_currentActivity.SideArea_VaalArea == null)
                {
                    _currentActivity.SideArea_VaalArea = new TrX_TrackedActivity
                    {
                        Area = sTargetArea,
                        AreaLevel = _nextAreaLevel,
                        AreaSeed = _nextAreaSeed,
                        Type = actType,
                        Started = ev.EventTime,
                        TimeStamp = lTS,
                        InstanceEndpoint = _currentActivity.InstanceEndpoint
                    };
                    _currentActivity.AddTag("vaal-area");
                }

                _currentActivity.Pause();
                _currentActivity.StartPauseTime(ev.EventTime);

                _currentActivity.SideArea_VaalArea.StartStopWatch();
                _currentActivity.SideArea_VaalArea.EndPauseTime(ev.EventTime);
                _isMapVaalArea = true;
            }
            else
            {
                _isMapVaalArea = false;
            }

            // Left Vaal Side area?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP && bSourceAreaIsVaal)
            {
                if (_currentActivity.SideArea_VaalArea != null)
                {
                    _currentActivity.SideArea_VaalArea.LastEnded = ev.EventTime;
                    _currentActivity.SideArea_VaalArea.StopStopWatch();
                    _currentActivity.SideArea_VaalArea.StartPauseTime(ev.EventTime);

                    _currentActivity.Resume();
                    _currentActivity.EndPauseTime(ev.EventTime);
                }
            }

            // Logbook Side area entered?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.LOGBOOK && actType == ACTIVITY_TYPES.LOGBOOK_SIDE)
            {
                if (_currentActivity.SideArea_LogbookSide == null)
                {
                    _currentActivity.SideArea_LogbookSide = new TrX_TrackedActivity
                    {
                        Area = sTargetArea,
                        AreaLevel = _nextAreaLevel,
                        AreaSeed = _nextAreaSeed,
                        Type = actType,
                        Started = ev.EventTime,
                        TimeStamp = lTS,
                        InstanceEndpoint = _currentActivity.InstanceEndpoint
                    };
                    _currentActivity.AddTag("exp-side-area");

                }

                _currentActivity.Pause();
                _currentActivity.StartPauseTime(ev.EventTime);

                _currentActivity.SideArea_LogbookSide.StartStopWatch();
                _currentActivity.SideArea_LogbookSide.EndPauseTime(ev.EventTime);
                _isMapLogbookSide = true;
            }
            else
            {
                _isMapLogbookSide = false;
            }

            // Left Logbook Side area?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.LOGBOOK && bSourceAreaIsLogbookSide)
            {
                if (_currentActivity.SideArea_LogbookSide != null)
                {
                    _currentActivity.SideArea_LogbookSide.LastEnded = ev.EventTime;
                    _currentActivity.SideArea_LogbookSide.StopStopWatch();
                    _currentActivity.SideArea_LogbookSide.StartPauseTime(ev.EventTime);

                    _currentActivity.Resume();
                    _currentActivity.EndPauseTime(ev.EventTime);
                }
            }

            // Abyss Side area entered?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP && actType == ACTIVITY_TYPES.ABYSSAL_DEPTHS)
            {
                if (_currentActivity.SideArea_AbyssArea == null)
                {
                    _currentActivity.SideArea_AbyssArea = new TrX_TrackedActivity
                    {
                        Area = sTargetArea,
                        AreaLevel = _nextAreaLevel,
                        AreaSeed = _nextAreaSeed,
                        Type = actType,
                        Started = ev.EventTime,
                        TimeStamp = lTS,
                        InstanceEndpoint = _currentActivity.InstanceEndpoint
                    };
                    _currentActivity.AddTag("abyss-depths");
                }

                _currentActivity.Pause();
                _currentActivity.StartPauseTime(ev.EventTime);

                _currentActivity.SideArea_AbyssArea.StartStopWatch();
                _currentActivity.SideArea_AbyssArea.EndPauseTime(ev.EventTime);
                _isMapAbyssArea = true;
            }
            else
            {
                _isMapAbyssArea = false;
            }

            // Left Abyss Side area?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP && bSourceAreaIsAbyss)
            {
                if (_currentActivity.SideArea_AbyssArea != null)
                {
                    _currentActivity.SideArea_AbyssArea.LastEnded = ev.EventTime;
                    _currentActivity.SideArea_AbyssArea.StopStopWatch();
                    _currentActivity.SideArea_AbyssArea.StartPauseTime(ev.EventTime);

                    _currentActivity.Resume();
                    _currentActivity.EndPauseTime(ev.EventTime);
                }
            }

            // Lab Side area entered?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP && actType == ACTIVITY_TYPES.LAB_TRIAL)
            {
                if (_currentActivity.SideArea_LabTrial == null)
                {
                    _currentActivity.SideArea_LabTrial = new TrX_TrackedActivity
                    {
                        Area = sTargetArea,
                        AreaLevel = _nextAreaLevel,
                        AreaSeed = _nextAreaSeed,
                        Type = actType,
                        Started = ev.EventTime,
                        TimeStamp = lTS,
                        InstanceEndpoint = _currentActivity.InstanceEndpoint
                    };
                    _currentActivity.AddTag("lab-trial");
                }

                _currentActivity.Pause();
                _currentActivity.StartPauseTime(ev.EventTime);

                _currentActivity.SideArea_LabTrial.StartStopWatch();
                _currentActivity.SideArea_LabTrial.EndPauseTime(ev.EventTime);
                _isMapLabTrial = true;
            }
            else
            {
                _isMapLabTrial = false;
            }

            // Left Lab Side area?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP && bSourceAreaIsLabTrial)
            {
                if (_currentActivity.SideArea_LabTrial != null)
                {
                    _currentActivity.SideArea_LabTrial.LastEnded = ev.EventTime;
                    _currentActivity.SideArea_LabTrial.StopStopWatch();
                    _currentActivity.SideArea_LabTrial.StartPauseTime(ev.EventTime);

                    _currentActivity.Resume();
                    _currentActivity.EndPauseTime(ev.EventTime);
                }
            }

            // Delving?
            if ((_currentActivity == null || _currentActivity.Type != ACTIVITY_TYPES.DELVE) && actType == ACTIVITY_TYPES.DELVE)
            {
                // Finish activity
                if (_currentActivity != null)
                {
                    FinishActivity(_currentActivity, null, ACTIVITY_TYPES.MAP, ev.EventTime);
                }

                _currentActivity = new TrX_TrackedActivity
                {
                    Area = "Azurite Mine",
                    Type = actType,
                    Started = ev.EventTime,
                    TimeStamp = lTS,
                    InstanceEndpoint = _currentInstanceEndpoint
                };

                _prevActivityOverlay = GetLastActivityByType(actType);
                OnActivityStarted(new TrX_CoreLogicActivityEventArgs(this, _currentActivity));
            }

            // Tane?
            if ((_currentActivity == null || _currentActivity.Type != ACTIVITY_TYPES.TANES_LABORATORY) && actType == ACTIVITY_TYPES.TANES_LABORATORY)
            {
                // Finish activity
                if (_currentActivity != null)
                {
                    FinishActivity(_currentActivity, null, ACTIVITY_TYPES.MAP, ev.EventTime);
                }

                _currentActivity = new TrX_TrackedActivity
                {
                    Area = _defaultMappings.TaneAreas[0],
                    Type = actType,
                    Started = ev.EventTime,
                    AreaLevel = 68,
                    TimeStamp = lTS,
                    InstanceEndpoint = _currentInstanceEndpoint
                };

                _prevActivityOverlay = GetLastActivityByType(actType);
                OnActivityStarted(new TrX_CoreLogicActivityEventArgs(this, _currentActivity));
            }

            // Update Delve level
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.DELVE && actType == ACTIVITY_TYPES.DELVE)
            {
                if (_nextAreaLevel > _currentActivity.AreaLevel)
                {
                    _currentActivity.AreaLevel = _nextAreaLevel;
                }
            }

            // End Delving?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.DELVE && !bTargetAreaMine)
            {
                FinishActivity(_currentActivity, null, ACTIVITY_TYPES.DELVE, DateTime.Now);
            }

            // End Tane?
            if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.TANES_LABORATORY && !bTargetAreaIsTane)
            {
                FinishActivity(_currentActivity, null, ACTIVITY_TYPES.TANES_LABORATORY, DateTime.Now);
            }


            //Campaign ?
            if (bTargetAreaIsCampaign)
            {
                // Do not track first camp visit after portal activity
                // Do not finish when logging in other char
                bool bFromActivity = bSourceAreaIsMap
                    || sSourceArea == "Aspirants Trial"
                    || _defaultMappings.SimulacrumAreas.Contains(sSourceArea)
                    || _defaultMappings.LogbookAreas.Contains(sSourceArea)
                    || _defaultMappings.TempleAreas.Contains(sSourceArea)
                    || _defaultMappings.AtziriAreas.Contains(sSourceArea)
                    || _defaultMappings.CatarinaFightAreas.Contains(sSourceArea)
                    || _defaultMappings.ElderAreas.Contains(sSourceArea)
                    || _defaultMappings.MavenFightAreas.Contains(sSourceArea)
                    || _defaultMappings.SyndicateSafehouseAreas.Contains(sSourceArea)
                    || _defaultMappings.ShaperAreas.Contains(sSourceArea)
                    || _defaultMappings.SirusAreas.Contains(sSourceArea)
                    || _defaultMappings.UberAtziriAreas.Contains(sSourceArea)
                    || _defaultMappings.SearingExarchAreas.Contains(sSourceArea)
                    || _defaultMappings.BlackStarAreas.Contains(sSourceArea)
                    || _defaultMappings.EaterOfWorldsAreas.Contains(sSourceArea)
                    || _defaultMappings.InfiniteHungerAreas.Contains(sSourceArea)
                    || _defaultMappings.TimelessLegionAreas.Contains(sSourceArea)
                    || _defaultMappings.TrialMasterAreas.Contains(sSourceArea)
                    || _defaultMappings.UltimatumAreas.Contains(sSourceArea)
                    || _defaultMappings.LakeOfKalandraAreas.Contains(sSourceArea)
                    || _defaultMappings.IncarnationOfDreadAreas.Contains(sSourceArea)
                    || _defaultMappings.IncarnationOfFearAreas.Contains(sSourceArea)
                    || _defaultMappings.IncarnationOfNeglectAreas.Contains(sSourceArea);

                // Do not track first town visit after login
                if (!_StartedFlag && !bFromActivity)
                {
                    if (_currentActivity != null)
                    {
                        if (sTargetArea != _currentActivity.Area || _currentInstanceEndpoint != _currentActivity.InstanceEndpoint || _currentAreaSeed != _currentActivity.AreaSeed)
                        {
                            _currentActivity.LastEnded = ev.EventTime;
                            FinishActivity(_currentActivity, sTargetArea, ACTIVITY_TYPES.CAMPAIGN, ev.EventTime);
                        }
                    }
                    else
                    {
                        _currentActivity = new TrX_TrackedActivity
                        {
                            Area = sTargetArea,
                            Type = ACTIVITY_TYPES.CAMPAIGN,
                            AreaLevel = _nextAreaLevel,
                            AreaSeed = _nextAreaSeed,
                            TimeStamp = lTS,
                            Started = ev.EventTime,
                            InstanceEndpoint = _currentInstanceEndpoint
                        };
                        _currentActivity.StartStopWatch();

                        _prevActivityOverlay = GetLastActivityByType(actType);
                        OnActivityStarted(new TrX_CoreLogicActivityEventArgs(this, _currentActivity));
                    }
                }
                else
                {
                    _StartedFlag = false;
                }


            }
            else
            {
                // Pause campaing when entering hideout
                if (sTargetArea.Contains("Hideout") && _currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.CAMPAIGN)
                {
                    _currentActivity.LastEnded = ev.EventTime;
                    FinishActivity(_currentActivity, null, ACTIVITY_TYPES.OTHER, ev.EventTime);
                }
            }

            // PAUSE RESUME Handling
            if (bTargetAreaIsMap || bTargetAreaIsHeist || bTargetAreaIsSimu || bTargetAreaIsCampaign || bTargetAreaIsBreachStone)
            {
                if (_currentActivity != null)
                {
                    if (_defaultMappings.CampAreas.Contains(sSourceArea) || sSourceArea.Contains("Hideout"))
                    {
                        if (sTargetArea == _currentActivity.Area && _currentInstanceEndpoint == _currentActivity.InstanceEndpoint && _currentActivity.AreaSeed == _currentAreaSeed)
                        {
                            _currentActivity.EndPauseTime(ev.EventTime);
                        }
                    }
                }
            }



            // Mechanisms that can be tracked with default logic:
            // One Area + Own instance
            bool enteringDefaultTrackableActivity =
                bTargetAreaIsMap ||
                bTargetAreaIsHeist ||
                bTargetAreaIsSimu ||
                bTargetAreaIsLab ||
                (bTargetAreaIsSanctum && isOutSideSanctumLeague) ||
                bTargetAreaMine ||
                bTargetAreaIsToTa ||
                bTargetAreaIsKingsmarch ||
                bTargetAreaIsTane ||
                bTargetAreaTemple ||
                bTargetAreaIsMI ||
                bTargetAreaIsUberAtziri ||
                bTargetAreaIsAtziri ||
                bTargetAreaIsElder ||
                bTargetAreaIsShaper ||
                bTargetAreaIsMavenFight ||
                bTargetAreaIsSirusFight ||
                bTargetAreaIsLogbook ||
                bTargetAreaIsSafehouse ||
                bTargetAreaIsCata ||
                bTargetAreaIsExarch ||
                bTargetAreaIsBreachStone ||
                bTargetAreaIsBlackStar ||
                bTargetAreaIsEaterOfWorlds ||
                bTargetAreaIsInfinitetHunger ||
                bTargetAreaIsLegion ||
                bTargetAreaIsTrialmaster ||
                bTargetAreaIsUltimatum ||
                bTargetAreaIsKalandra ||
                bTargetAreaIsDread ||
                bTargetAreaIsFear ||
                bTargetAreaIsNeglect;

            // Check if opened activity needs to be opened on Mapdevice
            bool isMapDeviceActivity =
                bTargetAreaIsMap ||
                bTargetAreaIsAtziri ||
                bTargetAreaIsCata ||
                bTargetAreaIsElder ||
                bTargetAreaIsShaper ||
                bTargetAreaIsSimu ||
                bTargetAreaIsSafehouse ||
                bTargetAreaIsSirusFight ||
                bTargetAreaTemple ||
                bTargetAreaIsMI ||
                bTargetAreaIsMavenFight ||
                bTargetAreaIsLogbook ||
                bTargetAreaIsExarch ||
                bTargetAreaIsBreachStone ||
                bTargetAreaIsBlackStar ||
                bTargetAreaIsInfinitetHunger ||
                bTargetAreaIsEaterOfWorlds ||
                bTargetAreaIsLegion ||
                bTargetAreaIsTrialmaster ||
                bTargetAreaIsUltimatum ||
                bTargetAreaIsKalandra ||
                bTargetAreaIsDread ||
                bTargetAreaIsFear ||
                bTargetAreaIsNeglect;

            if (enteringDefaultTrackableActivity)
            {
                if (_currentActivity == null)
                {
                    _currentActivity = new TrX_TrackedActivity
                    {
                        Area = sTargetArea,
                        Type = actType,
                        AreaLevel = _nextAreaLevel,
                        AreaSeed = _nextAreaSeed,
                        Started = ev.EventTime,
                        TimeStamp = lTS,
                        InstanceEndpoint = _currentInstanceEndpoint,
                    };
                    _nextAreaLevel = 0;
                    _nextAreaSeed = 0;
                    _prevActivityOverlay = GetLastActivityByType(actType);
                    OnActivityStarted(new TrX_CoreLogicActivityEventArgs(this, _currentActivity));
                }
                else
                {
                    if (bTargetAreaIsSimu || bTargetAreaIsMap)
                    {
                        _currentActivity.PortalsUsed++;
                    }
                }
                if (!_currentActivity.ManuallyPaused)
                    _currentActivity.StartStopWatch();

                if (bSourceAreaIsMap && bTargetAreaIsMap)
                {
                    if (!_isMapZana)
                    {
                        // entered Zana Map
                        _isMapZana = true;
                        _currentActivity.StopStopWatch();
                        if (_currentActivity.SideArea_ZanaMap == null)
                        {
                            _currentActivity.SideArea_ZanaMap = new TrX_TrackedActivity
                            {
                                Type = ACTIVITY_TYPES.MAP,
                                Area = sTargetArea,
                                AreaLevel = _nextAreaLevel,
                                AreaSeed = _nextAreaSeed,
                                Started = ev.EventTime,
                                TimeStamp = lTS,
                            };
                            _currentActivity.SideArea_ZanaMap.AddTag("zana-map");
                            _nextAreaLevel = 0;
                            _nextAreaSeed = 0;
                        }
                        if (!_currentActivity.SideArea_ZanaMap.ManuallyPaused)
                            _currentActivity.SideArea_ZanaMap.StartStopWatch();
                    }
                    else
                    {
                        _isMapZana = false;

                        // leave Zana Map
                        if (_currentActivity.SideArea_ZanaMap != null)
                        {
                            _isMapZana = false;
                            _currentActivity.SideArea_ZanaMap.StopStopWatch();
                            _currentActivity.SideArea_ZanaMap.LastEnded = ev.EventTime;
                            if (!_currentActivity.ManuallyPaused)
                                _currentActivity.StartStopWatch();
                        }
                    }
                }
                else
                {
                    _isMapZana = false; //TMP_DEBUG

                    // Do not track Lab-Trials
                    if ((!sSourceArea.Contains("Trial of")) && (_currentActivity.Type != ACTIVITY_TYPES.LABYRINTH) && (_currentActivity.Type != ACTIVITY_TYPES.DELVE) && (_currentActivity.Type != ACTIVITY_TYPES.TANES_LABORATORY))
                    {
                        if (sTargetArea != _currentActivity.Area || _currentInstanceEndpoint != _currentActivity.InstanceEndpoint || _currentAreaSeed != _currentActivity.AreaSeed)
                        {
                            FinishActivity(_currentActivity, sTargetArea, actType, ev.EventTime);
                        }
                    }
                }
            }
            else // ENTERING AN AREA WHICH IS NOT AN DEFAULT ACTIVITY
            {
                // Set endtime when logouts
                if (_currentActivity != null && _currentActivity.Type != ACTIVITY_TYPES.LABYRINTH && _currentActivity.Type != ACTIVITY_TYPES.CAMPAIGN)
                {
                    if (_currentActivity.Type == ACTIVITY_TYPES.BREACHSTONE && _defaultMappings.BreachstoneDomainAreas.Contains(sSourceArea))
                    {
                        _currentActivity.StopStopWatch();
                        _currentActivity.LastEnded = ev.EventTime;
                    }

                    //TEST: Pause when left the source area
                    if (sSourceArea == _currentActivity.Area || _defaultMappings.CampAreas.Contains(sTargetArea))
                    {
                        _currentActivity.StopStopWatch();
                        _currentActivity.LastEnded = ev.EventTime;

                        // PAUSE TIME
                        if (_defaultMappings.PausableActivityTypes.Contains(_currentActivity.Type))
                        {
                            if (_defaultMappings.CampAreas.Contains(sTargetArea) || (sTargetArea.Contains("Hideout") && !sTargetArea.Contains("Syndicate")))
                            {
                                _currentActivity.StartPauseTime(ev.EventTime);
                            }
                        }
                    }

                    if (_currentActivity.SideArea_ZanaMap != null)
                    {
                        if (sSourceArea == _currentActivity.SideArea_ZanaMap.Area)
                        {
                            _currentActivity.SideArea_ZanaMap.StopStopWatch();
                            _currentActivity.SideArea_ZanaMap.LastEnded = ev.EventTime;
                        }
                    }

                }
            }

            _currentArea = sAreaName;
        }

        /// <summary>
        /// Handle player died event
        /// </summary>
        /// <param name="ev"></param>
        private void HandlePlayerDiedEvent(TrX_TrackingEvent ev)
        {
            string sPlayerName = ev.LogLine.Split(' ')[8];
            if (!_knownPlayerNames.Contains(sPlayerName))
            {
                IncrementStat("TotalKilledCount", ev.EventTime, 1);

                // Lab?
                if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.LABYRINTH)
                {
                    _currentActivity.DeathCounter = 1;
                    FinishActivity(_currentActivity, null, ACTIVITY_TYPES.LABYRINTH, DateTime.Now);
                }

                if (!_defaultMappings.DeathCountEnabledAreas.Contains(_currentArea))
                {
                    return;
                }

                if (_currentActivity != null)
                {
                    if (_isMapZana)
                    {
                        if (_currentActivity.SideArea_ZanaMap != null)
                        {
                            _currentActivity.SideArea_ZanaMap.DeathCounter++;
                            _currentActivity.SideArea_ZanaMap.LastEnded = ev.EventTime;
                        }
                    }
                    else if (_isMapVaalArea)
                    {
                        if (_currentActivity.SideArea_VaalArea != null)
                        {
                            _currentActivity.SideArea_VaalArea.DeathCounter++;
                            _currentActivity.SideArea_VaalArea.LastEnded = ev.EventTime;
                        }
                    }
                    else if (_isMapSanctum)
                    {
                        if (_currentActivity.SideArea_Sanctum != null)
                        {
                            _currentActivity.SideArea_Sanctum.DeathCounter++;
                            _currentActivity.SideArea_Sanctum.LastEnded = ev.EventTime;
                        }
                    }
                    else if (_isMapAbyssArea)
                    {
                        if (_currentActivity.SideArea_AbyssArea != null)
                        {
                            _currentActivity.SideArea_AbyssArea.DeathCounter++;
                            _currentActivity.SideArea_AbyssArea.LastEnded = ev.EventTime;
                        }
                    }
                    else if (_isMapLabTrial)
                    {
                        if (_currentActivity.SideArea_LabTrial != null)
                        {
                            _currentActivity.SideArea_LabTrial.DeathCounter++;
                            _currentActivity.SideArea_LabTrial.LastEnded = ev.EventTime;
                        }
                    }
                    else if (_isMapLogbookSide)
                    {
                        if (_currentActivity.SideArea_LogbookSide != null)
                        {
                            _currentActivity.SideArea_LogbookSide.DeathCounter++;
                            _currentActivity.SideArea_LogbookSide.LastEnded = ev.EventTime;
                        }
                    }
                    else
                    {
                        _currentActivity.DeathCounter++;
                    }
                }
            }
        }

        /// <summary>
        /// Handle single event. Routes more complex calcs to dedicated methods.
        /// </summary>
        /// <param name="ev"></param>
        /// <param name="bInit"></param>
        private void HandleSingleEvent(TrX_TrackingEvent ev)
        {
            try
            {
                switch (ev.EventType)
                {
                    case EVENT_TYPES.ABNORMAL_DISCONNECT:
                        if (_currentActivity != null)
                        {
                            _log.Info("Abnormal disconnect found in log. Finishing Map.");
                            FinishActivity(_currentActivity, null, ACTIVITY_TYPES.MAP, ev.EventTime);
                        }
                        break;

                    case EVENT_TYPES.POE_CLIENT_START:
                        _StartedFlag = true;

                        if (_currentActivity != null)
                        {
                            // Filter out non trackable ends, like town visits right before app close
                            if (_currentActivity.LastEnded.Year < 2000)
                            {
                                _currentActivity = null;
                            }
                            else
                            {
                                _currentActivity.IsFinished = true;
                                if (_currentActivity.SideArea_ZanaMap != null)
                                {
                                    if (_currentActivity.SideArea_ZanaMap.LastEnded.Year < 2000)
                                    {
                                        _currentActivity.SideArea_ZanaMap = null;
                                    }
                                    else
                                    {
                                        _currentActivity.SideArea_ZanaMap.IsFinished = true;
                                    }

                                }
                                if (_currentActivity.SideArea_VaalArea != null)
                                {
                                    if (_currentActivity.SideArea_VaalArea.LastEnded.Year < 2000)
                                    {
                                        _currentActivity.SideArea_VaalArea = null;
                                    }
                                    else
                                    {
                                        _currentActivity.SideArea_VaalArea.IsFinished = true;
                                    }

                                }
                                if (_currentActivity.SideArea_LogbookSide != null)
                                {
                                    if (_currentActivity.SideArea_LogbookSide.LastEnded.Year < 2000)
                                    {
                                        _currentActivity.SideArea_LogbookSide = null;
                                    }
                                    else
                                    {
                                        _currentActivity.SideArea_LogbookSide.IsFinished = true;
                                    }

                                }
                                if (_currentActivity.SideArea_AbyssArea != null)
                                {
                                    if (_currentActivity.SideArea_AbyssArea.LastEnded.Year < 2000)
                                    {
                                        _currentActivity.SideArea_AbyssArea = null;
                                    }
                                    else
                                    {
                                        _currentActivity.SideArea_AbyssArea.IsFinished = true;
                                    }

                                }
                                if (_currentActivity.SideArea_LabTrial != null)
                                {
                                    if (_currentActivity.SideArea_LabTrial.LastEnded.Year < 2000)
                                    {
                                        _currentActivity.SideArea_LabTrial = null;
                                    }
                                    else
                                    {
                                        _currentActivity.SideArea_LabTrial.IsFinished = true;
                                    }

                                }
                                FinishActivity(_currentActivity, null, ACTIVITY_TYPES.MAP, ev.EventTime);
                            }
                        }
                        if (_trackingHO)
                        {
                            _trackingHO = false;
                        }
                        break;
                    case EVENT_TYPES.CHAT_CMD_RECEIVED:
                        string sCmd = ev.LogLine.Split(new string[] { "::" }, StringSplitOptions.None)[1];
                        if (_eventQueueInitizalized)
                        {
                            HandleChatCommand(sCmd);
                        }
                        break;
                    case EVENT_TYPES.ENTERED_AREA:
                        HandleAreaChangeEvent(ev);
                        break;
                    case EVENT_TYPES.PLAYER_DIED:
                        HandlePlayerDiedEvent(ev);
                        break;
                    case EVENT_TYPES.PLAYER_SUICIDE:
                        IncrementStat("Suicides", ev.EventTime, 1);
                        HandlePlayerDiedEvent(ev);
                        break;
                    case EVENT_TYPES.INSTANCE_CONNECTED:
                        _currentInstanceEndpoint = GetEndpointFromInstanceEvent(ev);
                        break;
                    case EVENT_TYPES.TRIALMASTER_VICTORY:
                        IncrementStat("TrialMasterSuccess", ev.EventTime, 1);
                        IncrementStat("TrialMasterVictory", ev.EventTime, 1);
                        if (_currentActivity != null
                            && (_currentActivity.Type == ACTIVITY_TYPES.MAP || _currentActivity.Type == ACTIVITY_TYPES.CAMPAIGN || _currentActivity.Type == ACTIVITY_TYPES.INSCRIBED_ULTIMATUM))
                        {
                            _currentActivity.AddTag("ultimatum");
                            _currentActivity.AddTag("ultimatum-win");

                            _currentActivity.TrialMasterSuccess = true;
                            _currentActivity.TrialMasterFullFinished = true;
                        }
                        break;
                    case EVENT_TYPES.TRIALMASTER_TOOK_REWARD:
                        IncrementStat("TrialMasterTookReward", ev.EventTime, 1);
                        IncrementStat("TrialMasterSuccess", ev.EventTime, 1);
                        if (_currentActivity != null
                            && (_currentActivity.Type == ACTIVITY_TYPES.MAP || _currentActivity.Type == ACTIVITY_TYPES.CAMPAIGN || _currentActivity.Type == ACTIVITY_TYPES.INSCRIBED_ULTIMATUM))
                        {
                            _currentActivity.TrialMasterSuccess = true;
                            _currentActivity.TrialMasterFullFinished = false;

                            _currentActivity.AddTag("ultimatum");
                            _currentActivity.AddTag("ultimatum-took-reward");
                        }
                        break;
                    case EVENT_TYPES.TRIALMASTER_PLAYER_LOSS:
                        if (_currentActivity != null
                           && (_currentActivity.Type == ACTIVITY_TYPES.MAP || _currentActivity.Type == ACTIVITY_TYPES.CAMPAIGN || _currentActivity.Type == ACTIVITY_TYPES.INSCRIBED_ULTIMATUM))
                        {
                            _currentActivity.TrialMasterSuccess = false;
                            _currentActivity.TrialMasterFullFinished = false;

                            _currentActivity.AddTag("ultimatum");
                            _currentActivity.AddTag("ultimatum-loss");
                        }
                        break;
                    case EVENT_TYPES.TRIALMASTER_ROUND_STARTED:
                        if (_currentActivity != null
                            && (_currentActivity.Type == ACTIVITY_TYPES.MAP || _currentActivity.Type == ACTIVITY_TYPES.CAMPAIGN || _currentActivity.Type == ACTIVITY_TYPES.INSCRIBED_ULTIMATUM))
                        {
                            _currentActivity.AddTag("ultimatum");
                            _currentActivity.TrialMasterCount += 1;
                        }
                        break;
                    case EVENT_TYPES.EINHAR_BEAST_CAPTURE:
                        IncrementStat("EinharCaptures", ev.EventTime, 1);
                        break;
                    case EVENT_TYPES.PARTYMEMBER_ENTERED_AREA:
                        AddKnownPlayerIfNotExists(ev.LogLine.Split(' ')[8]);
                        break;
                    case EVENT_TYPES.DELIRIUM_ENCOUNTER:

                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("delirium");
                            }
                            else
                            {
                                _currentActivity.AddTag("delirium");
                            }
                        }
                        break;
                    case EVENT_TYPES.NAMELESSSEER_ENCOUNTER:

                        IncrementStat("NamelessSeerEncounters", ev.EventTime, 1);

                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("seer");
                            }
                            else
                            {
                                _currentActivity.AddTag("seer");
                            }
                        }
                        break;
                    case EVENT_TYPES.REFLECTINGMIST_ENCOUNTER:

                        IncrementStat("ReflectingMistEncounters", ev.EventTime, 1);

                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("mist");
                            }
                            else
                            {
                                _currentActivity.AddTag("mist");
                            }
                        }

                        
                        break;
                    case EVENT_TYPES.MEMORYTEAR_ENCOUNTER:

                        IncrementStat("MemoryTears", ev.EventTime, 1);
                        
                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("memory");
                            }
                            else
                            {
                                _currentActivity.AddTag("memory");
                            }
                        }
                        break;
                    case EVENT_TYPES.BLIGHT_ENCOUNTER:
                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("blight");
                            }
                            else
                            {
                                _currentActivity.AddTag("blight");
                            }
                        }
                        break;
                    case EVENT_TYPES.EINHAR_ENCOUNTER:
                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("einhar");
                            }
                            else
                            {
                                _currentActivity.AddTag("einhar");
                            }
                        }
                        break;
                    case EVENT_TYPES.INCURSION_ENCOUNTER:
                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("incursion");
                            }
                            else
                            {
                                _currentActivity.AddTag("incursion");
                            }
                        }
                        break;
                    case EVENT_TYPES.NIKO_ENCOUNTER:
                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("niko");
                            }
                            else
                            {
                                _currentActivity.AddTag("niko");
                            }
                        }
                        break;
                    case EVENT_TYPES.ZANA_ENCOUNTER:
                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            _currentActivity.AddTag("zana");
                        }
                        break;
                    case EVENT_TYPES.SYNDICATE_ENCOUNTER:
                        if (CheckIfAreaIsMap(_currentArea) && _currentActivity != null)
                        {
                            if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                            {
                                _currentActivity.SideArea_ZanaMap.AddTag("syndicate");
                            }
                            else
                            {
                                _currentActivity.AddTag("syndicate");
                            }
                        }
                        break;
                    case EVENT_TYPES.LEVELUP:
                        bool bIsMySelf = true;
                        foreach (string s in _knownPlayerNames)
                        {
                            if (ev.LogLine.Contains(s))
                            {
                                bIsMySelf = false;
                                break;
                            }
                        }
                        if (bIsMySelf)
                        {
                            IncrementStat("LevelUps", ev.EventTime, 1);
                        }
                        break;
                    case EVENT_TYPES.SIMULACRUM_FULLCLEAR:
                        IncrementStat("SimulacrumCleared", ev.EventTime, 1);
                        break;
                    case EVENT_TYPES.LAB_FINISHED:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.LABYRINTH)
                        {
                            IncrementStat("LabsFinished", ev.EventTime, 1);
                            IncrementStat($"LabsCompleted_{_currentActivity.Area}", ev.EventTime, 1);
                            _currentActivity.Success = true;
                            PauseCurrentActivityOrSide();
                        }
                        break;
                    case EVENT_TYPES.LAB_START_INFO_RECEIVED:

                        break;
                    case EVENT_TYPES.NEXT_AREA_LEVEL_RECEIVED:
                        string sLvl = ev.LogLine.Split(new string[] { "Generating level " }, StringSplitOptions.None)[1]
                            .Split(' ')[0];
                        string sSeed = ev.LogLine.Split(new string[] { " with seed " }, StringSplitOptions.None)[1];

                        _nextAreaLevel = Convert.ToInt32(sLvl);
                        _nextAreaSeed = Convert.ToInt64(sSeed);

                        _currentAreaLevel = _nextAreaLevel;
                        _currentAreaSeed = _nextAreaSeed;
                        // Logbook check for cemetery & vaal temple
                        if (ev.LogLine.Contains("Expedition"))
                        {
                            _nextAreaIsExp = true;
                        }
                        break;
                    case EVENT_TYPES.EXP_DANNIG_ENCOUNTER:
                        if (_currentActivity != null && !_currentActivity.HasTag("dannig") && _currentActivity.Type == ACTIVITY_TYPES.MAP)
                        {
                            IncrementStat("ExpeditionEncounters", ev.EventTime, 1);
                            IncrementStat("ExpeditionEncounters_Dannig", ev.EventTime, 1);
                            AddTagAutoCreate("expedition", _currentActivity);
                            _currentActivity.Tags.Add("expedition");
                            _currentActivity.Tags.Add("dannig");
                        }
                        break;
                    case EVENT_TYPES.EXP_GWENNEN_ENCOUNTER:
                        if (_currentActivity != null && !_currentActivity.HasTag("gwennen") && _currentActivity.Type == ACTIVITY_TYPES.MAP)
                        {
                            IncrementStat("ExpeditionEncounters", ev.EventTime, 1);
                            IncrementStat("ExpeditionEncounters_Gwennen", ev.EventTime, 1);
                            _currentActivity.Tags.Add("expedition");
                            _currentActivity.Tags.Add("gwennen");
                        }
                        break;
                    case EVENT_TYPES.EXP_TUJEN_ENCOUNTER:
                        if (_currentActivity != null && !_currentActivity.HasTag("tujen") && _currentActivity.Type == ACTIVITY_TYPES.MAP)
                        {
                            IncrementStat("ExpeditionEncounters", ev.EventTime, 1);
                            IncrementStat("ExpeditionEncounters_Tujen", ev.EventTime, 1);
                            _currentActivity.Tags.Add("expedition");
                            _currentActivity.Tags.Add("tujen");
                        }
                        break;
                    case EVENT_TYPES.EXP_ROG_ENCOUNTER:
                        if (_currentActivity != null && !_currentActivity.HasTag("rog") && _currentActivity.Type == ACTIVITY_TYPES.MAP)
                        {
                            IncrementStat("ExpeditionEncounters", ev.EventTime, 1);
                            IncrementStat("ExpeditionEncounters_Rog", ev.EventTime, 1);
                            _currentActivity.Tags.Add("expedition");
                            _currentActivity.Tags.Add("rog");
                        }
                        break;
                    case EVENT_TYPES.HEIST_GIANNA_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("gianna"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("gianna");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.HEIST_HUCK_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("huck"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("huck");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.HEIST_ISLA_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("isla"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("isla");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.HEIST_NENET_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("nenet"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("nenet");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.HEIST_NILES_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("niles"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("niles");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.HEIST_TIBBS_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("tibbs"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("tibbs");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.HEIST_TULLINA_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("tullina"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("tullina");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.HEIST_VINDERI_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("vinderi"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("vinderi");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.HEIST_KARST_SPEAK:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.HEIST)
                        {
                            if (CheckIfAreaIsHeist(_currentArea, "The Rogue Harbour"))
                            {
                                if (!_currentActivity.HasTag("karst"))
                                {
                                    _currentActivity.RougeCont++;
                                    _currentActivity.AddTag("karst");

                                    if (_currentActivity.RougeCont >= 3)
                                    {
                                        _currentActivity.AddTag("blueprint");
                                    }
                                }
                            }
                        }
                        break;
                    case EVENT_TYPES.NEXT_CEMETERY_IS_LOGBOOK:
                        _nextAreaIsExp = true;
                        break;
                    case EVENT_TYPES.TWICE_BLESSED:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.LABYRINTH)
                        {
                            _currentActivity.AddTag("twice-blessed");
                        }
                        break;
                    case EVENT_TYPES.HARVEST:
                        if (_currentActivity != null && _currentActivity.Type == ACTIVITY_TYPES.MAP)
                        {
                            _currentActivity.AddTag("harvest");
                        }
                        break;
                    case EVENT_TYPES.SANCTUM_LYCIA_2_KILLED:
                        IncrementStat("SanctumKilledLycia2", ev.EventTime);
                        break;
                    case EVENT_TYPES.SANCTUM_LYCIA_1_KILLED:
                        IncrementStat("SanctumKilledLycia1", ev.EventTime);
                        break;
                    case EVENT_TYPES.ANCESTOR_MATCH_LOST:
                        IncrementStat("AncestorMatchesLost", ev.EventTime);
                        break;
                    case EVENT_TYPES.ANCESTOR_MATCH_WON:
                        IncrementStat("AncestorMatchesWon", ev.EventTime);
                        break;
                    case EVENT_TYPES.ANCESTOR_TOURNAMENT_LOST:
                        IncrementStat("AncestorTournamentsLost", ev.EventTime);
                        break;
                    case EVENT_TYPES.ANCESTOR_TOURNAMENT_WON:
                        IncrementStat("AncestorTournamentsWon", ev.EventTime);
                        break;
                    case EVENT_TYPES.TRIALMASTER_ENCOUNTERED:
                        if (_currentActivity != null
                            && (_currentActivity.Type == ACTIVITY_TYPES.MAP || _currentActivity.Type == ACTIVITY_TYPES.CAMPAIGN))
                        {
                            _currentActivity.AddTag("ultimatum");
                        }
                        break;
                }

                if (_eventQueueInitizalized)
                {
                    SaveStatsCache();
                }
            }
            catch (Exception ex)
            {
                _log.Error($"Error handling event: {ex.Message}.");
                _log.Debug(ex.ToString());
            }
        }

        /// <summary>
        /// Increment a stat with an defined value. Updates the database.
        /// 
        /// </summary>
        /// <param name="s_key"></param>
        /// <param name="dt"></param>
        /// <param name="i_value">default=1</param>
        private void IncrementStat(string s_key, DateTime dt, int i_value = 1)
        {
            _myStats.IncrementStat(s_key, dt, i_value);
        }

        /// <summary>
        /// Update a stat with a fixed value. Updates the database
        /// </summary>
        /// <param name="s_key"></param>
        /// <param name="dt"></param>
        /// <param name="i_value"></param>
        private void SetStat(string s_key, DateTime dt, int i_value)
        {
            _myStats.SetStat(s_key, dt, i_value);
        }

        /// <summary>
        /// Extract the instance endpoint from a log line.
        /// </summary>
        /// <param name="ev"></param>
        /// <returns></returns>
        private string GetEndpointFromInstanceEvent(TrX_TrackingEvent ev)
        {
            return ev.LogLine.Split(new String[] { "Connecting to instance server at " }, StringSplitOptions.None)[1];
        }

        /// <summary>
        /// Get most recent activity with given type
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        private TrX_TrackedActivity GetLastActivityByType(ACTIVITY_TYPES type)
        {
            List<TrX_TrackedActivity> list = new List<TrX_TrackedActivity>();

            foreach (TrX_TrackedActivity act in _eventHistory)
            {
                if (act.Type == type)
                    list.Add(act);
            }

            if (list.Count > 0)
                return list[0];

            return null;
        }

        /// <summary>
        /// Finishs the current activity.
        /// </summary>
        /// <param name="activity"></param>
        /// <param name="sNextMap">next map to start. Set to null if there is none</param>
        /// <param name="sNextMapType"></param>
        /// <param name="dtNextMapStarted"></param>
        public void FinishActivity(TrX_TrackedActivity activity, string sNextMap, ACTIVITY_TYPES sNextMapType, DateTime dtNextMapStarted, bool stats_only = false)
        {
            _log.Debug($"Finishing activity: {activity.UniqueID} | Started: {activity.Started}");
            _currentActivity.StopStopWatch();

            bool isValid = true;

            if (!stats_only)
            {
                TimeSpan ts = new TimeSpan();
                TimeSpan tsZana = new TimeSpan();
                TimeSpan tsVaal = new TimeSpan();
                TimeSpan tsAbyss = new TimeSpan();
                TimeSpan tsLabTrial = new TimeSpan();
                TimeSpan tsLogbookSide = new TimeSpan();
                TimeSpan tsSanctum = new TimeSpan();
                int totalSecondsMainActivity;
                int totalSecondsZanaMap = 0;
                int totalSecondsVallSideArea = 0;
                int totalSecondsSanctum = 0;
                int totalSecondsAbyss = 0;
                int totalSecondsLabTrial = 0;
                int totalSecondsLogBookSide = 0;

                // Filter out invalid labs (discnnect etc)
                if (activity.Type == ACTIVITY_TYPES.LABYRINTH)
                {
                    if (activity.Area == "Unknown")
                    {
                        // no area changes logged for some old lab runs :/
                        activity.Success = activity.DeathCounter == 0;
                    }

                    // Labs must be successfull or death counter 1
                    if ((activity.Success != true && activity.DeathCounter == 0) && (activity).TrialCount < 3)
                    {
                        _log.Warn($"Filtered out lab run [time={activity.Started}, area: {activity.Area}]. Reason Success=False AND DeathCounter = 0. Maybe disconnect or game crash while lab.");
                        _currentActivity = null;
                        return;
                    }
                }

                // When parsing at startup
                if (!_eventQueueInitizalized)
                {
                    ts = (activity.LastEnded - activity.Started);
                    try
                    {
                        totalSecondsMainActivity = Convert.ToInt32(ts.TotalSeconds);
                        totalSecondsMainActivity -= Convert.ToInt32(activity.PausedTime);
                    }
                    catch
                    {
                        totalSecondsMainActivity = 0;
                    }

                    if (activity.SideArea_ZanaMap != null)
                    {
                        tsZana = (activity.SideArea_ZanaMap.LastEnded - activity.SideArea_ZanaMap.Started);
                    }

                    if (activity.SideArea_VaalArea != null)
                    {
                        tsVaal = (activity.SideArea_VaalArea.LastEnded - activity.SideArea_VaalArea.Started);
                    }

                    if (activity.SideArea_Sanctum != null)
                    {
                        tsSanctum = (activity.SideArea_Sanctum.LastEnded - activity.SideArea_Sanctum.Started);
                    }

                    if (activity.SideArea_LogbookSide != null)
                    {
                        tsLogbookSide = (activity.SideArea_LogbookSide.LastEnded - activity.SideArea_LogbookSide.Started);
                    }

                    if (activity.SideArea_AbyssArea != null)
                    {
                        tsAbyss = (activity.SideArea_AbyssArea.LastEnded - activity.SideArea_AbyssArea.Started);
                    }

                    if (activity.SideArea_LabTrial != null)
                    {
                        tsLabTrial = (activity.SideArea_LabTrial.LastEnded - activity.SideArea_LabTrial.Started);
                    }

                    // Filter out town activities without end date
                    if (activity.LastEnded.Year < 2000)
                    {
                        isValid = false;
                    }

                    // Filter out 0-second town visits
                    if (activity.Type == ACTIVITY_TYPES.CAMPAIGN && totalSecondsMainActivity == 0)
                    {
                        isValid = false;
                    }

                }
                else // when tracking live
                {
                    ts = activity.StopWatchTimeSpan;
                    totalSecondsMainActivity = Convert.ToInt32(ts.TotalSeconds);

                    if (activity.SideArea_ZanaMap != null)
                    {
                        tsZana = activity.SideArea_ZanaMap.StopWatchTimeSpan;
                    }

                    if (activity.SideArea_VaalArea != null)
                    {
                        tsVaal = (activity.SideArea_VaalArea.StopWatchTimeSpan);
                    }

                    if (activity.SideArea_Sanctum != null)
                    {
                        tsSanctum = (activity.SideArea_Sanctum.StopWatchTimeSpan);
                    }

                    if (activity.SideArea_LogbookSide != null)
                    {
                        tsLogbookSide = (activity.SideArea_LogbookSide.StopWatchTimeSpan);
                    }

                    if (activity.SideArea_AbyssArea != null)
                    {
                        tsAbyss = (activity.SideArea_AbyssArea.StopWatchTimeSpan);
                    }

                    if (activity.SideArea_LabTrial != null)
                    {
                        tsLabTrial = (activity.SideArea_LabTrial.StopWatchTimeSpan);
                    }
                }

                // Calculate times
                totalSecondsZanaMap = Convert.ToInt32(tsZana.TotalSeconds); // historic, no zana side aras
                totalSecondsVallSideArea = Convert.ToInt32(tsVaal.TotalSeconds);
                totalSecondsLogBookSide = Convert.ToInt32(tsLogbookSide.TotalSeconds);
                totalSecondsAbyss = Convert.ToInt32(tsAbyss.TotalSeconds);
                totalSecondsLabTrial = Convert.ToInt32(tsLabTrial.TotalSeconds);
                totalSecondsSanctum = Convert.ToInt32(tsSanctum.TotalSeconds);

                if (isValid)
                {
                    _currentActivity.TotalSeconds = totalSecondsMainActivity;

                    bool greaterThenMinCap = totalSecondsMainActivity > _timeCapMin;

                    if (!_eventHistory.Contains(_currentActivity))
                    {
                        if (greaterThenMinCap)
                        {
                            _eventHistory.Insert(0, _currentActivity);
                        }
                    }

                    TimeSpan tsMain = TimeSpan.FromSeconds(totalSecondsMainActivity);
                    activity.CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}",
                              tsMain.Hours, tsMain.Minutes, tsMain.Seconds);

                    if (!_parsedActivities.Contains(activity.UniqueID))
                    {
                        // Save to DB
                        SaveToActivityLog(((DateTimeOffset)activity.Started).ToUnixTimeSeconds(), GetStringFromActType(activity.Type), activity.Area, activity.AreaLevel, totalSecondsMainActivity, activity.DeathCounter, activity.TrialMasterCount, false, activity.Tags, activity.Success, Convert.ToInt32(activity.PausedTime));
                    }

                    if (activity.SideArea_ZanaMap != null)
                    {
                        TimeSpan tsZanaMap = TimeSpan.FromSeconds(totalSecondsZanaMap);
                        activity.SideArea_ZanaMap.CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}",
                               tsZanaMap.Hours, tsZanaMap.Minutes, tsZanaMap.Seconds);

                        activity.SideArea_ZanaMap.TotalSeconds = totalSecondsZanaMap;

                        if (greaterThenMinCap) _eventHistory.Insert(0, _currentActivity.SideArea_ZanaMap);

                        if (!_parsedActivities.Contains(activity.SideArea_ZanaMap.UniqueID))
                        {
                            //Save to DB
                            SaveToActivityLog(((DateTimeOffset)activity.SideArea_ZanaMap.Started).ToUnixTimeSeconds(), GetStringFromActType(activity.SideArea_ZanaMap.Type), activity.SideArea_ZanaMap.Area, activity.SideArea_ZanaMap.AreaLevel, totalSecondsZanaMap, activity.SideArea_ZanaMap.DeathCounter, activity.SideArea_ZanaMap.TrialMasterCount, true, activity.SideArea_ZanaMap
                                .Tags, activity.SideArea_ZanaMap.Success, Convert.ToInt32(activity.SideArea_ZanaMap.PausedTime));
                        }
                    }

                    if (activity.SideArea_VaalArea != null)
                    {
                        TimeSpan tsVaalMap = TimeSpan.FromSeconds(totalSecondsVallSideArea);
                        activity.SideArea_VaalArea.CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}",
                               tsVaalMap.Hours, tsVaalMap.Minutes, tsVaalMap.Seconds);

                        activity.SideArea_VaalArea.TotalSeconds = totalSecondsVallSideArea;

                        if (greaterThenMinCap) _eventHistory.Insert(0, _currentActivity.SideArea_VaalArea);

                        if (!_parsedActivities.Contains(activity.SideArea_VaalArea.UniqueID))
                        {
                            //Save to DB
                            SaveToActivityLog(((DateTimeOffset)activity.SideArea_VaalArea.Started).ToUnixTimeSeconds(), GetStringFromActType(activity.SideArea_VaalArea.Type), activity.SideArea_VaalArea.Area, activity.SideArea_VaalArea.AreaLevel, totalSecondsVallSideArea, activity.SideArea_VaalArea.DeathCounter, activity.SideArea_VaalArea.TrialMasterCount, true, activity.SideArea_VaalArea
                                .Tags, activity.SideArea_VaalArea.Success, Convert.ToInt32(activity.SideArea_VaalArea.PausedTime));
                        }
                    }

                    if (activity.SideArea_Sanctum != null)
                    {
                        TimeSpan tsSanctumArea = TimeSpan.FromSeconds(totalSecondsSanctum);
                        activity.SideArea_Sanctum.CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}",
                               tsSanctumArea.Hours, tsSanctumArea.Minutes, tsSanctumArea.Seconds);

                        activity.SideArea_Sanctum.TotalSeconds = totalSecondsSanctum;

                        if (greaterThenMinCap) _eventHistory.Insert(0, _currentActivity.SideArea_Sanctum);

                        if (!_parsedActivities.Contains(activity.SideArea_Sanctum.UniqueID))
                        {
                            //Save to DB
                            SaveToActivityLog(((DateTimeOffset)activity.SideArea_Sanctum.Started).ToUnixTimeSeconds(), GetStringFromActType(activity.SideArea_Sanctum.Type), activity.SideArea_Sanctum.Area, activity.SideArea_Sanctum.AreaLevel, totalSecondsSanctum, activity.SideArea_Sanctum.DeathCounter, activity.SideArea_Sanctum.TrialMasterCount, true, activity.SideArea_Sanctum
                                .Tags, activity.SideArea_Sanctum.Success, Convert.ToInt32(activity.SideArea_Sanctum.PausedTime));
                        }
                    }

                    if (activity.SideArea_LogbookSide != null)
                    {
                        TimeSpan tsLBSide = TimeSpan.FromSeconds(totalSecondsLogBookSide);
                        activity.SideArea_LogbookSide.CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}",
                               tsLBSide.Hours, tsLBSide.Minutes, tsLBSide.Seconds);

                        activity.SideArea_LogbookSide.TotalSeconds = totalSecondsLogBookSide;

                        if (greaterThenMinCap) _eventHistory.Insert(0, _currentActivity.SideArea_LogbookSide);

                        if (!_parsedActivities.Contains(activity.SideArea_LogbookSide.UniqueID))
                        {
                            //Save to DB
                            SaveToActivityLog(((DateTimeOffset)activity.SideArea_LogbookSide.Started).ToUnixTimeSeconds(), GetStringFromActType(activity.SideArea_LogbookSide.Type), activity.SideArea_LogbookSide.Area, activity.SideArea_LogbookSide.AreaLevel, totalSecondsVallSideArea, activity.SideArea_LogbookSide.DeathCounter, activity.SideArea_LogbookSide.TrialMasterCount, true, activity.SideArea_LogbookSide
                                .Tags, activity.SideArea_LogbookSide.Success, Convert.ToInt32(activity.SideArea_LogbookSide.PausedTime));
                        }
                    }

                    if (activity.SideArea_AbyssArea != null)
                    {
                        TimeSpan tsAbyssMap = TimeSpan.FromSeconds(totalSecondsAbyss);
                        activity.SideArea_AbyssArea.CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}",
                               tsAbyssMap.Hours, tsAbyssMap.Minutes, tsAbyssMap.Seconds);

                        activity.SideArea_AbyssArea.TotalSeconds = totalSecondsAbyss;

                        if (greaterThenMinCap) _eventHistory.Insert(0, _currentActivity.SideArea_AbyssArea);

                        if (!_parsedActivities.Contains(activity.SideArea_AbyssArea.UniqueID))
                        {
                            //Save to DB
                            SaveToActivityLog(((DateTimeOffset)activity.SideArea_AbyssArea.Started).ToUnixTimeSeconds(), GetStringFromActType(activity.SideArea_AbyssArea.Type), activity.SideArea_AbyssArea.Area, activity.SideArea_AbyssArea.AreaLevel, totalSecondsAbyss, activity.SideArea_AbyssArea.DeathCounter, activity.SideArea_AbyssArea.TrialMasterCount, true, activity.SideArea_AbyssArea
                                .Tags, activity.SideArea_AbyssArea.Success, Convert.ToInt32(activity.SideArea_AbyssArea.PausedTime));
                        }
                    }

                    if (activity.SideArea_LabTrial != null)
                    {
                        TimeSpan tsLabTrial2 = TimeSpan.FromSeconds(totalSecondsLabTrial);
                        activity.SideArea_LabTrial.CustomStopWatchValue = String.Format("{0:00}:{1:00}:{2:00}",
                               tsLabTrial2.Hours, tsLabTrial2.Minutes, tsLabTrial2.Seconds);
                        if (greaterThenMinCap) _eventHistory.Insert(0, _currentActivity.SideArea_LabTrial);

                        if (!_parsedActivities.Contains(activity.SideArea_LabTrial.UniqueID))
                        {
                            //Save to DB
                            SaveToActivityLog(((DateTimeOffset)activity.SideArea_LabTrial.Started).ToUnixTimeSeconds(), GetStringFromActType(activity.SideArea_LabTrial.Type), activity.SideArea_LabTrial.Area, activity.SideArea_LabTrial.AreaLevel, totalSecondsLabTrial, activity.SideArea_LabTrial.DeathCounter, activity.SideArea_LabTrial.TrialMasterCount, true, activity.SideArea_LabTrial
                                .Tags, activity.SideArea_LabTrial.Success, Convert.ToInt32(activity.SideArea_LabTrial.PausedTime));
                        }
                    }

                    // Trigger event
                    if (greaterThenMinCap)
                    {
                        OnActivityFinished(new TrX_CoreLogicActivityEventArgs(this, activity));
                    }
                }
                else
                {
                    _log.Warn($"Filtered out invalid activity: {activity.UniqueID}, Started: {activity.Started}, LastEnded: {activity.LastEnded}, Type: {activity.Type}, Instance: {activity.InstanceEndpoint}");
                }

                if (activity.Type == ACTIVITY_TYPES.HEIST)
                {
                    IncrementStat("TotalHeistsDone", activity.Started, 1);
                }
                else if (activity.Type == ACTIVITY_TYPES.MAP)
                {
                    IncrementStat("TotalMapsDone", activity.Started, 1);

                    if (activity.SideArea_ZanaMap != null)
                    {
                        IncrementStat("TotalMapsDone", activity.SideArea_ZanaMap.Started, 1);
                    }
                }
                else if (activity.Type == ACTIVITY_TYPES.TEMPLE)
                {
                    IncrementStat("TemplesDone", activity.Started, 1);
                }
            }

            if (sNextMap != null)
            {
                _prevActivityOverlay = GetLastActivityByType(sNextMapType);

                _currentActivity = new TrX_TrackedActivity
                {
                    Area = sNextMap,
                    Type = sNextMapType,
                    AreaLevel = _nextAreaLevel,
                    AreaSeed = _nextAreaSeed,
                    InstanceEndpoint = _currentInstanceEndpoint,
                    Started = dtNextMapStarted,
                    TimeStamp = ((DateTimeOffset)dtNextMapStarted).ToUnixTimeSeconds()
                };

                _nextAreaLevel = 0;
                _nextAreaSeed = 0;
                _currentActivity.StartStopWatch();
                OnActivityStarted(new TrX_CoreLogicActivityEventArgs(this, _currentActivity));

            }
            else
            {
                _currentActivity = null;
            }

        }

        /// <summary>
        /// Simply save the current app version to VERSION.txt
        /// </summary>
        private void SaveVersion()
        {
            StreamWriter wrt = new StreamWriter(TrX_Static.VERSION_FILE_PATH);
            wrt.WriteLine(TrX_Static.VERSION);
            wrt.Close();
        }

        /// <summary>
        /// Get name of a given Breachstone
        /// </summary>
        /// <param name="s_ara"></param>
        /// <param name="i_area_level"></param>
        /// <returns></returns>
        public string GetBreachStoneName(string s_ara, int i_area_level)
        {
            string breachLoard = "";
            string breachStoneQuality = "";

            switch (s_ara)
            {
                case "Chayulas Domain":
                    breachLoard = "Chayulas";
                    switch (i_area_level)
                    {
                        // Normal
                        case 80:
                            breachStoneQuality = "";
                            break;
                        // Charged
                        case 81:
                            breachStoneQuality = "Charged";
                            break;
                        // Enriched
                        case 82:
                            breachStoneQuality = "Enriched";
                            break;
                        // Pure
                        case 83:
                            breachStoneQuality = "Pure";
                            break;
                        // Flawless
                        case 84:
                            breachStoneQuality = "Flawless";
                            break;
                    }
                    break;
                case "Eshs Domain":
                    breachLoard = "Eshs";
                    switch (i_area_level)
                    {
                        // Normal
                        case 70:
                            breachStoneQuality = "";
                            break;
                        // Charged
                        case 74:
                            breachStoneQuality = "Charged";
                            break;
                        // Enriched
                        case 79:
                            breachStoneQuality = "Enriched";
                            break;
                        // Pure
                        case 81:
                            breachStoneQuality = "Pure";
                            break;
                        // Flawless
                        case 84:
                            breachStoneQuality = "Flawless";
                            break;
                    }
                    break;
                case "Xophs Domain":
                    breachLoard = "Xophs";
                    switch (i_area_level)
                    {
                        // Normal
                        case 70:
                            breachStoneQuality = "";
                            break;
                        // Charged
                        case 74:
                            breachStoneQuality = "Charged";
                            break;
                        // Enriched
                        case 79:
                            breachStoneQuality = "Enriched";
                            break;
                        // Pure
                        case 81:
                            breachStoneQuality = "Pure";
                            break;
                        // Flawless
                        case 84:
                            breachStoneQuality = "Flawless";
                            break;
                    }
                    break;
                case "Uul-Netols Domain":
                    breachLoard = "Uul-Netols";
                    switch (i_area_level)
                    {
                        // Normal
                        case 75:
                            breachStoneQuality = "";
                            break;
                        // Charged
                        case 78:
                            breachStoneQuality = "Charged";
                            break;
                        // Enriched
                        case 81:
                            breachStoneQuality = "Enriched";
                            break;
                        // Pure
                        case 82:
                            breachStoneQuality = "Pure";
                            break;
                        // Flawless
                        case 84:
                            breachStoneQuality = "Flawless";
                            break;
                    }
                    break;
                case "Tuls Domain":
                    breachLoard = "Tuls";
                    switch (i_area_level)
                    {
                        // Normal
                        case 70:
                            breachStoneQuality = "";
                            break;
                        // Charged
                        case 74:
                            breachStoneQuality = "Charged";
                            break;
                        // Enriched
                        case 79:
                            breachStoneQuality = "Enriched";
                            break;
                        // Pure
                        case 81:
                            breachStoneQuality = "Pure";
                            break;
                        // Flawless
                        case 84:
                            breachStoneQuality = "Flawless";
                            break;
                    }
                    break;
            }

            if (string.IsNullOrEmpty(breachStoneQuality))
            {
                return string.Format("{0} {1}", breachLoard, "Breachstone");
            }
            else
            {
                return string.Format("{0} {1} {2}", breachLoard, breachStoneQuality, "Breachstone");
            }
        }

        public int GetImageIndex(TrX_TrackedActivity map)
        {
            int iIndex = 0;
            // Calculate Image Index
            if (map.Type == ACTIVITY_TYPES.MAP)
            {
                if (map.MapTier > 0 && map.MapTier <= 5)
                {
                    iIndex = 0;
                }
                else if (map.MapTier >= 6 && map.MapTier <= 10)
                {
                    iIndex = 1;
                }
                else if (map.MapTier >= 11)
                {
                    iIndex = 2;
                }
            }
            else if (map.Type == ACTIVITY_TYPES.TEMPLE)
            {
                iIndex = 3;
            }
            else if (map.Type == ACTIVITY_TYPES.HEIST)
            {
                iIndex = 4;
            }
            else if (map.Type == ACTIVITY_TYPES.ABYSSAL_DEPTHS)
            {
                iIndex = 5;
            }
            else if (map.Type == ACTIVITY_TYPES.LABYRINTH || map.Type == ACTIVITY_TYPES.LAB_TRIAL)
            {
                iIndex = 6;
            }
            else if (map.Type == ACTIVITY_TYPES.CAMPAIGN)
            {
                iIndex = 7;
            }
            else if (map.Type == ACTIVITY_TYPES.LOGBOOK || map.Type == ACTIVITY_TYPES.LOGBOOK_SIDE)
            {
                iIndex = 8;
            }
            else if (map.Type == ACTIVITY_TYPES.VAAL_SIDEAREA)
            {
                iIndex = 9;
            }
            else if (map.Type == ACTIVITY_TYPES.CATARINA_FIGHT)
            {
                iIndex = 10;
            }
            else if (map.Type == ACTIVITY_TYPES.SAFEHOUSE)
            {
                iIndex = 11;
            }
            else if (map.Type == ACTIVITY_TYPES.DELVE)
            {
                iIndex = 12;
            }
            else if (map.Type == ACTIVITY_TYPES.MAVEN_INVITATION)
            {
                iIndex = 13;
            }
            else if (map.Type == ACTIVITY_TYPES.SIRUS_FIGHT)
            {
                iIndex = 14;
            }
            else if (map.Type == ACTIVITY_TYPES.ATZIRI)
            {
                iIndex = 15;
            }
            else if (map.Type == ACTIVITY_TYPES.UBER_ATZIRI)
            {
                iIndex = 16;
            }
            else if (map.Type == ACTIVITY_TYPES.ELDER_FIGHT)
            {
                iIndex = 17;
            }
            else if (map.Type == ACTIVITY_TYPES.SHAPER_FIGHT)
            {
                iIndex = 18;
            }
            else if (map.Type == ACTIVITY_TYPES.SIMULACRUM)
            {
                iIndex = 19;
            }
            else if (map.Type == ACTIVITY_TYPES.MAVEN_FIGHT)
            {
                iIndex = 20;
            }
            else if (map.Type == ACTIVITY_TYPES.ECHO_OF_REVERENCE) // Dread
            {
                iIndex = 46;
            }
            else if (map.Type == ACTIVITY_TYPES.ECHO_OF_TRAUMA) // Fear
            {
                iIndex = 47;
            }
            else if (map.Type == ACTIVITY_TYPES.ECHO_OF_LONELINESS) // Neglect
            {
                iIndex = 48;
            }
            else if (map.Type == ACTIVITY_TYPES.BREACHSTONE)
            {
                if (map.Area.Contains("Chayula"))
                {
                    switch (map.AreaLevel)
                    {
                        // Normal
                        case 80:
                            iIndex = 21;
                            break;
                        // Charged
                        case 81:
                            iIndex = 41;
                            break;
                        // Enriched
                        case 82:
                            iIndex = 40;
                            break;
                        // Pure
                        case 83:
                            iIndex = 39;
                            break;
                        // Flawless
                        case 84:
                            iIndex = 38;
                            break;
                    }
                }
                else if (map.Area.Contains("Esh"))
                {
                    switch (map.AreaLevel)
                    {
                        // Normal
                        case 70:
                            iIndex = 22;
                            break;
                        // Charged
                        case 74:
                            iIndex = 45;
                            break;
                        // Enriched
                        case 79:
                            iIndex = 44;
                            break;
                        // Pure
                        case 81:
                            iIndex = 43;
                            break;
                        // Flawless
                        case 84:
                            iIndex = 42;
                            break;
                    }
                }
                else if (map.Area.Contains("Xoph"))
                {
                    switch (map.AreaLevel)
                    {
                        // Normal
                        case 70:
                            iIndex = 23;
                            break;
                        // Charged
                        case 74:
                            iIndex = 37;
                            break;
                        // Enriched
                        case 79:
                            iIndex = 36;
                            break;
                        // Pure
                        case 81:
                            iIndex = 35;
                            break;
                        // Flawless
                        case 84:
                            iIndex = 34;
                            break;
                    }
                }
                else if (map.Area.Contains("Uul-Netol"))
                {
                    switch (map.AreaLevel)
                    {
                        // Normal
                        case 75:
                            iIndex = 24;
                            break;
                        // Charged
                        case 78:
                            iIndex = 33;
                            break;
                        // Enriched
                        case 81:
                            iIndex = 32;
                            break;
                        // Pure
                        case 82:
                            iIndex = 31;
                            break;
                        // Flawless
                        case 84:
                            iIndex = 30;
                            break;
                    }
                }
                else if (map.Area.Contains("Tul"))
                {
                    switch (map.AreaLevel)
                    {
                        // Normal
                        case 70:
                            iIndex = 25;
                            break;
                        // Charged
                        case 74:
                            iIndex = 29;
                            break;
                        // Enriched
                        case 79:
                            iIndex = 28;
                            break;
                        // Pure
                        case 81:
                            iIndex = 27;
                            break;
                        // Flawless
                        case 84:
                            iIndex = 26;
                            break;
                    }
                }
            }
            return iIndex;
        }

        /// <summary>
        /// Convert an activity type to string
        /// </summary>
        /// <param name="a_type"></param>
        /// <returns></returns>
        private string GetStringFromActType(ACTIVITY_TYPES a_type)
        {
            return a_type.ToString().ToLower();
        }

        /// <summary>
        /// Extract an arae name out of a log line
        /// </summary>
        /// <param name="ev"></param>
        /// <returns></returns>
        private string GetAreaNameFromEvent(TrX_TrackingEvent ev)
        {
            string sArea = ev.LogLine.Split(new string[] { "You have entered" }, StringSplitOptions.None)[1]
                .Replace(".", "").Trim();
            return sArea.Replace("'", "");
        }

        /// <summary>
        /// Get activity tag object for ID
        /// </summary>
        /// <param name="s_id"></param>
        /// <returns></returns>
        public TrX_ActivityTag GetTagByID(string s_id)
        {
            foreach (TrX_ActivityTag tag in _tags)
            {
                if (tag.ID == s_id)
                    return tag;
            }
            return null;
        }

        /// <summary>
        /// Export Activity log to CSV
        /// </summary>
        /// <param name="sPath"></param>
        public void WriteActivitiesToCSV(string sPath)
        {
            StreamWriter wrt = new StreamWriter(sPath);
            TrX_TrackedActivity tm;

            //Write headline
            string sLine = "time;type;area;area_level;stopwatch;death_counter";
            wrt.WriteLine(sLine);

            for (int i = 0; i < _eventHistory.Count; i++)
            {
                tm = _eventHistory[i];
                sLine = "";
                sLine += tm.Started;
                sLine += ";" + tm.Type;
                sLine += ";" + tm.Area;
                sLine += ";" + tm.AreaLevel;
                sLine += ";" + tm.StopWatchValue;
                sLine += ";" + tm.DeathCounter;
                wrt.WriteLine(sLine);
            }
            wrt.Close();
        }

        /// <summary>
        /// Add a new tag
        /// </summary>
        /// <param name="tag"></param>
        private void AddTag(TrX_ActivityTag tag)
        {
            _tags.Add(tag);
            _dataBackend.DoNonQuery("INSERT INTO tx_tags (tag_id, tag_display, tag_bgcolor, tag_forecolor, tag_type, tag_show_in_lv) VALUES "
                + "('" + tag.ID + "', '" + tag.DisplayName + "', '" + tag.BackColor.ToArgb() + "', '" + tag.ForeColor.ToArgb() + "', 'custom', " + (tag.ShowInListView ? "1" : "0") + ")");
            // Trigger event
            OnTagsUpdated(new TrX_CoreLogicGenericEventArgs(this));
        }

        /// <summary>
        /// Add tag. Create if not exists
        /// </summary>
        /// <param name="s_id"></param>
        /// <param name="act"></param>
        public void AddTagAutoCreate(string s_id, TrX_TrackedActivity act)
        {
            int iIndex = GetTagIndex(s_id);
            TrX_ActivityTag tag;

            if (true) // TODO
            {
                if (iIndex < 0)
                {
                    tag = new TrX_ActivityTag(s_id, false)
                    {
                        BackColor = Color.White,
                        ForeColor = Color.Black
                    };
                    AddTag(tag);
                }
                else
                {
                    tag = _tags[iIndex];
                }

                if (!tag.IsDefault)
                {
                    act.AddTag(tag.ID);
                    string sTags = "";
                    // Update tags in DB // TODO
                    for (int i = 0; i < act.Tags.Count; i++)
                    {
                        sTags += act.Tags[i];
                        if (i < (act.Tags.Count - 1))
                            sTags += "|";
                    }
                    _dataBackend.DoNonQuery("UPDATE tx_activity_log SET act_tags = '" + sTags + "' WHERE timestamp = " + act.TimeStamp.ToString());
                }
            }
        }

        public void RemoveTagFromActivity(string s_id, TrX_TrackedActivity act)
        {
            TrX_ActivityTag tag = GetTagByID(s_id);
            if (tag != null && !tag.IsDefault)
            {
                act.RemoveTag(s_id);
                string sTags = "";

                // Update tags in DB // TODO
                for (int i = 0; i < act.Tags.Count; i++)
                {
                    sTags += act.Tags[i];
                    if (i < (act.Tags.Count - 1))
                        sTags += "|";
                    _dataBackend.DoNonQuery("UPDATE tx_activity_log SET act_tags = '" + sTags + "' WHERE timestamp = " + act.TimeStamp.ToString());
                }
            }
        }

        private int GetTagIndex(string s_id)
        {
            for (int i = 0; i < _tags.Count; i++)
            {
                if (_tags[i].ID == s_id)
                {
                    return i;
                }
            }
            return -1;
        }

        public void PauseCurrentActivityOrSide()
        {
            if (_currentActivity != null)
            {
                if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                {
                    if (!_currentActivity.SideArea_ZanaMap.ManuallyPaused)
                    {
                        _currentActivity.SideArea_ZanaMap.Pause();
                    }
                }
                else if (_isMapVaalArea && _currentActivity.SideArea_VaalArea != null)
                {
                    if (!_currentActivity.SideArea_VaalArea.ManuallyPaused)
                    {
                        _currentActivity.SideArea_VaalArea.Pause();
                    }
                }
                else if (_isMapAbyssArea && _currentActivity.SideArea_AbyssArea != null)
                {
                    if (!_currentActivity.SideArea_AbyssArea.ManuallyPaused)
                    {
                        _currentActivity.SideArea_AbyssArea.Pause();
                    }
                }
                else if (_isMapLabTrial && _currentActivity.SideArea_LabTrial != null)
                {
                    if (!_currentActivity.SideArea_LabTrial.ManuallyPaused)
                    {
                        _currentActivity.SideArea_LabTrial.Pause();
                    }
                }
                else if (_isMapLogbookSide && _currentActivity.SideArea_LogbookSide != null)
                {
                    if (!_currentActivity.SideArea_LogbookSide.ManuallyPaused)
                    {
                        _currentActivity.SideArea_LogbookSide.Pause();
                    }
                }
                else
                {
                    if (!_currentActivity.ManuallyPaused)
                    {
                        _currentActivity.Pause();
                    }
                }
            }
        }

        public void ResumeCurrentActivityOrSide()
        {
            if (_currentActivity != null)
            {
                if (_isMapZana && _currentActivity.SideArea_ZanaMap != null)
                {
                    if (_currentActivity.SideArea_ZanaMap.ManuallyPaused)
                    {
                        _currentActivity.SideArea_ZanaMap.Resume();
                    }
                }
                else if (_isMapVaalArea && _currentActivity.SideArea_VaalArea != null)
                {
                    if (_currentActivity.SideArea_VaalArea.ManuallyPaused)
                    {
                        _currentActivity.SideArea_VaalArea.Resume();
                    }
                }
                else if (_isMapAbyssArea && _currentActivity.SideArea_AbyssArea != null)
                {
                    if (_currentActivity.SideArea_AbyssArea.ManuallyPaused)
                    {
                        _currentActivity.SideArea_AbyssArea.Resume();
                    }
                }
                else if (_isMapLabTrial && _currentActivity.SideArea_LabTrial != null)
                {
                    if (_currentActivity.SideArea_LabTrial.ManuallyPaused)
                    {
                        _currentActivity.SideArea_LabTrial.Resume();
                    }
                }
                else if (_isMapLogbookSide && _currentActivity.SideArea_LogbookSide != null)
                {
                    if (_currentActivity.SideArea_LogbookSide.ManuallyPaused)
                    {
                        _currentActivity.SideArea_LogbookSide.Resume();
                    }
                }
                else
                {
                    if (_currentActivity.ManuallyPaused)
                    {
                        _currentActivity.Resume();
                    }
                }
            }
        }


    }
}