// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    #pragma warning disable CS1591
    public class Activity : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The ActivityType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActivityType { get; set; }
#nullable restore
#else
        public string ActivityType { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The AreaLevel property</summary>
        public long? AreaLevel { get; set; }
        /// <summary>The AreaName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AreaName { get; set; }
#nullable restore
#else
        public string AreaName { get; set; }
#endif
        /// <summary>The DeathCounter property</summary>
        public long? DeathCounter { get; set; }
        /// <summary>The DurationSec property</summary>
        public long? DurationSec { get; set; }
        /// <summary>The Identifier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Identifier { get; set; }
#nullable restore
#else
        public string Identifier { get; set; }
#endif
        /// <summary>The StartTime property</summary>
        public DateTimeOffset? StartTime { get; set; }
        /// <summary>The Tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ApiSdk.Models.Activity"/> and sets the default values.
        /// </summary>
        public Activity()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ApiSdk.Models.Activity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApiSdk.Models.Activity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApiSdk.Models.Activity();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ActivityType", n => { ActivityType = n.GetStringValue(); } },
                { "AreaLevel", n => { AreaLevel = n.GetLongValue(); } },
                { "AreaName", n => { AreaName = n.GetStringValue(); } },
                { "DeathCounter", n => { DeathCounter = n.GetLongValue(); } },
                { "DurationSec", n => { DurationSec = n.GetLongValue(); } },
                { "Identifier", n => { Identifier = n.GetStringValue(); } },
                { "StartTime", n => { StartTime = n.GetDateTimeOffsetValue(); } },
                { "Tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("ActivityType", ActivityType);
            writer.WriteLongValue("AreaLevel", AreaLevel);
            writer.WriteStringValue("AreaName", AreaName);
            writer.WriteLongValue("DeathCounter", DeathCounter);
            writer.WriteLongValue("DurationSec", DurationSec);
            writer.WriteStringValue("Identifier", Identifier);
            writer.WriteDateTimeOffsetValue("StartTime", StartTime);
            writer.WriteCollectionOfPrimitiveValues<string>("Tags", Tags);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
